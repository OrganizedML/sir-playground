{"version":3,"sources":["components/icons8-business-buildings.svg","components/icons8-organization.svg","components/icons8-manufacturing.svg","components/icons8-park-with-street-light.svg","model/agents/basic-agent.js","model/agents/S-agent.js","model/agents/R-agent.js","model/agents/I-agent.js","model/Space.js","model/Model.js","components/PixiRenderer.js","components/TimeDisplay.js","components/LineChart.js","containers/App.js","serviceWorker.js","index.js"],"names":["module","exports","Agent","unique_id","position","model","now_in_center","home","undefined","has_infected","this","dx","Math","random","dy","movement","next_moves","space","get_neighborhood_empty","push","next_move","moves","floor","length","move_agent","potForce","get_potential_force","normalize_2D","x","y","random_multiplier","schedule_random_activity","current_mode","schedule_speed","infected","stay_at_home","stronger_repulsion","exit_lock","correct_boundaries","agents_inRange_UIDS","get_agents_inRange","infection_radius","uid","agent","s_list","filter","object","index","arr","className","infection_probability_onContact","array","norm","sqrt","pow","Susceptible","steps_since_infection","duration","duration_mean","getRandomInt","to_i","to_r","steps_till_symptoms","steps_each_day","infection_recoginition_probability","spread_infection","hotspot_move","min","max","ceil","Removed","Infected","Space","width","height","agent_size","agent_list","lc","Array","map","fill","ll","home_multiplier","work_multiplier","repulsion_force_multiplier","attractive_points","load_world_layout","selection","add_attraction_at","multiplier","active_at","influence_range","group","tag","uid_list","positions","agents_inrange","value","includes","ag","alpha","beta","force_x_rep","force_y_rep","force_x_att","force_y_att","inRange_linked_cell","repulsion_range","pos","get_local_repulsion_positions","current_agent","p","dist","distance","U_grad_rep","att","NAND","grad_x","grad_y","range","current_range","splice","reset_linked_cell","n","nx","ny","next","uids","current_position","with_position","uids_inRange","filtered","console","log","radius_att_points","agents_in_position","element","att_point_valid_dist","infection_range","list","uids_pos_repulsion","uid_pos","new_position","found_index","findIndex","array1","array2","SIR_Model","population","initial_infected","max_step","step_num","day","schedule","r_list","i_list","old_R","old_I","old_S","R_array","get_random_position_empty","new_agent","add_agent","u2","bool","list_uids","from","remove_agent","get_agent_attributes","key","step","add_r","add_i","move_to_r","move_to_i","healthy","el","count_susceptible","count_infected","count_removed","R","slice","sum_R","reduce","a","b","dRdt","I","sum_I","dIdt","gamma","R0","mode","daily_step","update_linked_cell","calculate_mode","num_sus","step_s","num_inf","step_i","num_rem","step_r","calculate_R0","reset","initialize","i","Sleep","start","end","ans","milliseconds","Promise","resolve","setTimeout","susceptibleTex","infectedTex","infectedUnrecognizedTex","recoveredTex","app","mainContainer","initialRatio","infoText","tickerFunc","agents","elapsedTime","PixiRenderer","React","memo","worldState","worldWidth","worldHeight","currentWidth","currentHeight","stepDuration","stageContainer","useRef","useEffect","PIXI","transparent","stage","addChild","current","appendChild","view","gr","beginFill","lineStyle","drawCircle","endFill","renderer","generateTexture","w","h","style","isNaN","ticker","remove","deltaTime","TARGET_FPMS","Object","keys","forEach","agentInfo","sprite","oldPos","add","hotSpots","hotSpot","hotSpotTex","strength","strengthFactor","WorkImage_1","WorkImage_2","WorkImage_3","hotSpotSprite","ParkImage","agentList","removeChild","oldState","state","text","texture","filters","GlowFilter","outerStrength","color","BlurFilter","fontFamily","fontSize","align","ref","TimeDisplay","time","isNight","Box","display","direction","alignItems","justify","Typography","variant","LineChart","chartData","chartRef","data","showTooltips","options","maintainAspectRatio","responsive","elements","point","radius","interval","history","App","useState","labels","datasets","dayPhase","setWorldState","setWorldWidth","setWorldHeight","initialInfected","setInitialInfected","initialSuspectible","setInitialSuspectible","probabilityRecognized","setProbabilityRecognized","infectionRadius","setInfectionRadius","spreadProbability","setSpreadProbability","strongerRepulsion","setStrongerRepulsion","stayAtHome","setStayAtHome","stayAtHomeAll","setStayAtHomeAll","infectionDuration","setInfectionDuration","profile","setProfile","setStepDuration","newWorldState","newHotSpots","attractivePoint","clearInterval","setInterval","newInfectedCount","newInfectedUnrecognizedCount","newSusceptibleCount","newRecoveredCount","isSimulationEnd","hour","newTime","Date","setSeconds","setMinutes","setHours","toLocaleTimeString","newAgentList","newSList","assign","newIList","newRList","newHistoryElement","infectedUnrecognized","recovered","susceptible","newHistory","newLabels","newSDataset","label","lineTension","borderColor","newIDataset","newIIRDataset","newRDataset","pointBackgroundColor","pointBorderWidth","pointHoverRadius","histEl","newChartData","flexDirection","AppBar","Toolbar","mt","mb","flexGrow","overflow","Container","Grid","container","spacing","item","xs","gutterBottom","Slider","valueLabelDisplay","marks","onChange","event","newValue","FormControlLabel","control","Switch","checked","target","set_spread_probability","set_stronger_repulsion","set_stay_at_home","set_exit_lock","Select","fullWidth","MenuItem","Divider","Button","size","onClick","monitorHeight","minDim","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.4ae7fc11.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/icons8-business-buildings.d40fc481.svg\";","module.exports = __webpack_public_path__ + \"static/media/icons8-organization.4b917871.svg\";","module.exports = __webpack_public_path__ + \"static/media/icons8-manufacturing.6a1458e1.svg\";","module.exports = __webpack_public_path__ + \"static/media/icons8-park-with-street-light.9024a2d1.svg\";","import { Susceptible } from \"./S-agent\";\n\nclass Agent{\n    constructor(unique_id, position, model, now_in_center=false,\n        home=undefined, has_infected=0){\n            this.unique_id = unique_id;\n            this.position = position;\n            this.now_in_center = now_in_center;\n            this.model = model;\n            this.home = home;\n            this.has_infected = has_infected;\n\n            this.dx = (Math.random() - 0.5) * 2;\n            this.dy = (Math.random() - 0.5) * 2;\n        }\n    \n    // movement\n    move() {\n        if (this.model.movement === \"random\"){\n            var next_moves = this.model.space.get_neighborhood_empty(this.position);\n            next_moves.push(this.position);\n\n            var next_move = random_choice(next_moves);\n\n        } else if (this.model.movement === \"center\") {\n            // todo\n        }\n\n        // admin overhead in space - world\n        this.position = next_move;\n        this.model.space.move_agent(this, next_move);\n    }\n\n    // movement\n    hotspot_move() {\n        // todo: fix parameters, random, pot and last step\n        var potForce = this.model.space.get_potential_force(this);\n        potForce = normalize_2D(potForce);\n\n        // random activity\n        var random_multiplier = this.model.schedule_random_activity[this.model.current_mode];\n        var schedule_speed = this.model.schedule_speed[this.model.current_mode];\n        if (!(NAND(this.infected, this.model.stay_at_home))) {\n            random_multiplier = 0;\n            schedule_speed = 0.5;\n        } else if (this.model.stronger_repulsion) {\n            random_multiplier = 0;\n        } else if (this.model.exit_lock) {\n            random_multiplier = 0;\n            schedule_speed *= 0.5;\n        }\n        \n        potForce[0] += this.dx + random_multiplier * (Math.random() - 0.5) * 2;\n        potForce[1] += this.dy + random_multiplier * (Math.random() - 0.5) * 2;\n        \n        // normalize Force - maybe scale instead? 0-2?\n        potForce = normalize_2D(potForce);\n        this.dx = potForce[0];\n        this.dy = potForce[1];\n\n        // Move, check if overlap, correct movement - left, right, random -dont move after a few tries\n        // var next_move = this.model.space.get_valid_position_from_potForce(this, potForce);\n        \n        // w/o overlap check\n        var next_move = [this.position[0] + this.dx * schedule_speed, this.position[1] + this.dy * schedule_speed];\n        next_move = this.model.space.correct_boundaries(next_move);\n\n        // admin overhead in space - world\n        this.position = next_move;\n        this.model.space.move_agent(this, this.position);\n    }\n    \n    spread_infection() {\n        var agents_inRange_UIDS = this.model.space.get_agents_inRange(this, this.model.infection_radius);\n\n        for (var uid of agents_inRange_UIDS) {\n            var agent = this.model.s_list.filter(function(object, index, arr){ return object.unique_id === uid;})[0];\n            if (typeof agent !== \"undefined\") {\n                if (agent.className == \"Susceptible\" && agent.infected == false && Math.random() < this.model.infection_probability_onContact) {\n                    agent.infected = true;\n                    this.has_infected += 1;\n                }\n            }\n        }\n    }\n}\n\nfunction random_choice(moves) {\n    var move = moves[Math.floor(Math.random() * moves.length)];\n    return move\n}\n\nfunction floor_position(position) {\n    return [Math.floor(position[0]), Math.floor(position[1])]\n}\n\nfunction normalize_2D(array) {\n    var norm = Math.sqrt(Math.pow(array[0], 2) + Math.pow(array[1], 2));\n    if (norm < 0.01) {\n        return [0, 0]\n    } else {\n        return [array[0]/norm, array[1]/norm]\n    }\n}\n\nfunction NAND(x, y) {\n\t// You can use whatever JS operators that you would like: &&, ||, !\n  return !(x && y);\n}\n\nexport {Agent}","import { Agent } from \"model/agents/basic-agent\"\n\nclass Susceptible extends Agent {\n    constructor(unique_id, position, model, now_in_center=false,\n        home=undefined, infected=false, steps_since_infection=0,\n        has_infected=0) {\n\n      super(unique_id, position, model, now_in_center, home, has_infected);\n\n      this.infected = infected;\n      this.steps_since_infection = steps_since_infection;\n      this.className = \"Susceptible\";\n\n      this.duration = this.model.duration_mean + getRandomInt(-1, 1);\n    }\n    \n    // step\n    step(){\n        var to_i = -1;\n        var to_r = -1;\n\n        // todo: faster if not whole array?\n        // interact with other agents\n        if (this.infected && this.steps_since_infection > this.model.steps_till_symptoms) {\n            if (Math.floor(this.steps_since_infection / this.model.steps_each_day) > this.duration) {\n                to_r = this.unique_id;\n\n            } else if (Math.random() < this.model.infection_recoginition_probability) {\n                to_i = this.unique_id;\n\n            } else {\n                // infected but not recognized\n                this.spread_infection();\n                // move agent\n                // this.move()\n                this.hotspot_move()\n                // spread in new position\n                this.spread_infection();\n                this.steps_since_infection += 1;\n            }\n        } else if (this.infected) {\n            this.steps_since_infection += 1;\n        }\n        \n        // move agent\n        this.hotspot_move()\n                \n        // interact with admin\n        return [to_r, to_i]\n    }\n\n}\n\nfunction getRandomInt(min, max) {\n    min = Math.ceil(min);\n    max = Math.floor(max);\n    return Math.floor(Math.random() * (max - min + 1)) + min;\n}\n\nexport { Susceptible }","import { Agent } from \"model/agents/basic-agent\"\n\nclass Removed extends Agent {\n    constructor(unique_id, position, model, now_in_center=false,\n        home=undefined, infected=false, steps_since_infection=0,\n        has_infected=0) {\n\n        super(unique_id, position, model, now_in_center, home, has_infected);\n        this.className = \"Removed\";\n    }    \n    // step\n    step(){\n        this.hotspot_move()\n        // no interaction - only occupying space\n    }\n\n}\n\nexport { Removed }","import { Agent } from \"model/agents/basic-agent\"\n\nclass Infected extends Agent {\n    constructor(unique_id, position, model, now_in_center=false,\n        home=undefined, steps_since_infection=0,\n        has_infected=0) {\n\n      super(unique_id, position, model, now_in_center, home, has_infected);\n\n      this.infected = true;\n      this.steps_since_infection = steps_since_infection;\n      this.className = \"Infected\";\n\n      this.duration = this.model.duration_mean + getRandomInt(-1, 1);\n    }\n    \n    \n    // step\n    step(){\n        var to_r = -1\n\n        // interact agents\n        if (Math.floor(this.steps_since_infection / this.model.steps_each_day) > this.duration) {\n            to_r = this.unique_id\n\n        } else {\n            this.spread_infection();\n            // move\n            this.hotspot_move()\n\n            // spread in new position\n            this.spread_infection();\n            this.steps_since_infection += 1;\n        }\n\n        // interact model - administration\n        return to_r\n    }\n\n}\n\nfunction getRandomInt(min, max) {\n    min = Math.ceil(min);\n    max = Math.floor(max);\n    return Math.floor(Math.random() * (max - min + 1)) + min;\n}\n\nexport { Infected }","class Space {\n    constructor(width, height){\n        this.width = width;\n        this.height = height;\n        this.agent_size = 1;\n        this.agent_list = []\n\n        // -> Nachbarschaftsliste - kontinuerlicher Raum - l n liste WiPro\n        this.lc = [...Array(this.height)].map(x=>Array(this.width).fill(-1))  \n        this.ll = new Array();\n        this.ll[0] = [-1, -1, [0, 0]];\n\n        this.home_multiplier = 0.75;\n        this.work_multiplier = 1;\n        this.repulsion_force_multiplier = 2;\n\n        // potential fields\n        this.attractive_points = new Array();\n        this.load_world_layout(\"work\")\n    }\n\n    load_world_layout(selection) {\n        if (selection == \"work\") {\n            this.add_attraction_at([Math.floor(this.width/5), Math.floor(4*this.height/5)], this.work_multiplier, [\"work\"], -1, 1);\n            this.add_attraction_at([Math.floor(4*this.width/5), Math.floor(this.height/5)], this.work_multiplier, [\"work\"], -1, 2);\n            this.add_attraction_at([Math.floor(2*this.width/5), Math.floor(this.height/5)], this.work_multiplier, [\"work\"], -1, 3);\n            this.add_attraction_at([Math.floor(4*this.width/5), Math.floor(1*this.height/2)], this.work_multiplier, [\"morning\",\"afterwork\"], 20, -1, \"park\"); // down right\n            //this.add_attraction_at([this.width-10, this.height-10], 0.25, [\"night\"], 10); // up right\n            //this.add_attraction_at([10, 10], 0.25, [\"evening\",\"morning\"], 10); // down left        \n            //this.add_attraction_at([this.width-10, 10], 0.25, [\"evening\",\"morning\"], 3); // down right\n        } else {\n            // todo\n        }\n    }\n\n    add_attraction_at(position, multiplier, active_at, influence_range=-1, group=-1, tag=\"default\") {\n        // active_at should be list like [\"night\", \"afterwork\"]\n        this.attractive_points.push([position, multiplier, active_at, influence_range, group, tag]);// pos + value\n    }\n\n    // Linked Cell + Potential Field\n    // each step: update linked cell\n    // each movement: get potential force for each agent\n    get_local_repulsion_positions(uid_list) {\n        if (uid_list.length > 0) {\n            var positions = new Array();\n            var agents_inrange = this.agent_list.filter(function(value) {return uid_list.includes(value[0])}); // filter by uid\n\n            for (var ag of agents_inrange) {\n                positions.push(ag[1]); // add position of agents in range\n            }\n            \n            return positions;\n        } else {\n            return [];\n        }\n    }\n\n    get_potential_force(agent, alpha=1, beta=2) {\n        var force_x_rep = 0;\n        var force_y_rep = 0;\n        var force_x_att = 0;\n        var force_y_att = 0;\n\n        var uid_list = this.inRange_linked_cell(agent.position, agent.unique_id, agent.model.repulsion_range); // range == infection range for movement\n        var pos = this.get_local_repulsion_positions(uid_list);\n        var current_agent = this.agent_list.filter(function(ag) {return ag[0] == agent.unique_id;})[0];\n        \n        for (var p of pos) {\n            var dist = distance(agent.position, p);\n            var U_grad_rep = this.repulsion_force_multiplier / Math.pow(dist, 2) *(1 / dist - 1/ (agent.model.repulsion_range + 0.1));\n\n            if (dist > 0.001) {\n                force_x_rep += - U_grad_rep * (agent.position[0] - p[0]) / dist;\n                force_y_rep += - U_grad_rep * (agent.position[1] - p[1]) / dist;\n            }   \n        }\n\n        for (var att of this.attractive_points) { //-\\nabla U_{att}(\\mathbf{x}) = -\\alpha (\\mathbf{x}-\\mathbf{x_{goal}}) \n            if (att[2].includes(agent.model.current_mode) && !agent.model.exit_lock) {\n                var dist = distance(agent.position, att[0]);\n\n                if ((dist < att[3] || att[3] === -1) && (current_agent[3] === att[4] || att[4] === -1) && NAND(agent.infected, agent.model.stay_at_home)) {\n                    force_x_att += - att[1] * (agent.position[0] - att[0][0])/ dist;\n                    force_y_att += - att[1] * (agent.position[1] - att[0][1])/ dist;\n                }\n            }            \n        }\n\n        if (force_x_att === 0 && force_y_att === 0) {\n            var dist = distance(agent.position, current_agent[2]); // home position\n            \n            if (dist > 0.001) {\n                force_x_att = - this.home_multiplier * (agent.position[0] - current_agent[2][0])/ dist;\n                force_y_att = - this.home_multiplier * (agent.position[1] - current_agent[2][1])/ dist;\n            }            \n        }\n        if (agent.model.stronger_repulsion) {\n            beta += beta;\n        }\n\n        var grad_x = alpha*force_x_att - beta*force_x_rep;\n        var grad_y = alpha*force_y_att - beta*force_y_rep;\n\n        return [grad_x, grad_y] // todo weight rep and att\n    }\n\n    reset_linked_cell(range) {\n        this.lc = [...Array(Math.floor(this.height/range)+1)].map(x=>Array(Math.floor(this.width/range)+1).fill(-1));\n        this.current_range = range;\n        this.ll.splice(0, this.ll.length);\n        this.ll[0] = [-1, -1, [0, 0]];\n    }\n\n    update_linked_cell(range) {\n        this.reset_linked_cell(range);\n\n        var n = 0;\n        for (var agent of this.agent_list) {\n            var nx = Math.floor(agent[1][0] / range);\n            var ny = Math.floor(agent[1][1] / range);\n\n            this.ll[n] = [this.lc[nx][ny], agent[0], agent[1]]; // ll list hast index for linked cell method and uid\n            this.lc[nx][ny] = n;\n            n++;\n        }\n    }\n\n    uids_in_cell_linked_cell(nx,ny) {\n        var uids = new Array();\n        var next;\n\n        next = this.lc[nx][ny]; // index des ersten atoms auslesen\n        while (this.ll[next][0] != -1) { //solange atome in Zelle nx, ny\n            uids.push(this.ll[next][1]); // add uid to list\n            next = this.ll[next][0]; // find next agent in ll\n        }\n\n        return uids\n    }\n\n    inRange_linked_cell(current_position, uid, range, with_position=false) {\n        var nx; \n        nx = Math.floor(current_position[0] / range);\n        var ny;\n        ny = Math.floor(current_position[1] / range);\n\n        var uids_inRange = new Array(); //  problem hier? array hatt 20.000 einträge\n        var next;\n\n        next = this.lc[nx][ny]; // index des ersten agenten auslesen\n        if (next >= 0) {\n            while (this.ll[next][0] != -1) { //solange atome in Zelle nx, ny\n                if (uid != this.ll[next][1]) {\n                    if (with_position) {\n                        uids_inRange.push([this.ll[next][1], this.ll[next][2]]);\n                    } else {\n                        uids_inRange.push(this.ll[next][1]); // add uid to list\n                    }\n                }\n                next = this.ll[next][0]; // find next agent in ll\n            }\n        }\n\n        return uids_inRange\n    }\n\n    inRange_all_uids_linked_cell(current_position, range, with_position=false) {\n        var nx = Math.floor(current_position[0] / range);\n        var ny = Math.floor(current_position[1] / range);\n\n        var uids_inRange = new Array();\n        var next;\n\n        next = this.lc[nx][ny]; // index des ersten atoms auslesen\n        while (this.ll[next][0] != -1) { //solange atome in Zelle nx, ny\n            if (with_position) {\n                uids_inRange.push([this.ll[next][1], this.ll[next][2]]);              \n            } else {\n                uids_inRange.push(this.ll[next][1]); // add uid to list\n            }\n            next = this.ll[next][0]; // find next agent in ll\n        }\n\n        return uids_inRange\n    }\n\n\n    // Registration/Administration of agents\n    //\n    add_agent(agent, home, group=-1) {       \n        this.agent_list.push([agent.unique_id, agent.position, home, group])\n    }\n\n    get_agent_attributes(agent) {\n        var filtered = this.agent_list.filter(function(value, index, arr){ return value[0] == agent.unique_id;});\n        return filtered\n    }\n\n    remove_agent(agent) {\n\n        if (agent.unique_id !== \"undefined\") {\n            var filtered = this.agent_list.filter(function(value, index, arr){ return value[0] != agent.unique_id;});\n\n            if (filtered.length == (this.agent_list.length - 1)) {\n                this.agent_list = filtered;\n\n            } else {\n                console.log(\"Error removing agent from world. UID not valid\")\n            }\n        } else {\n            console.log(\"Error setting up new agents\")\n        }\n    }\n\n    get_random_position_empty(radius_att_points=5) {\n        do {\n            var x = Math.floor((Math.random() * this.width));\n            var y = Math.floor((Math.random() * this.height));\n\n            var agents_in_position = this.agent_list.filter(function(element) {return distance(element[1], [x, y] < 0.5);});\n            \n            var att_point_valid_dist = true;\n            for (var att of this.attractive_points) {\n                if (distance(att[0], [x, y]) <= radius_att_points) {\n                    att_point_valid_dist = false;\n                }\n            }\n\n        } while (agents_in_position.length != 0 || att_point_valid_dist == false);\n\n        return [x, y]\n    }\n\n    // overlap is ok\n    /*\n    get_valid_position_from_potForce(agent, potForce) {\n        // todo\n        var new_position = [agent.position[0] + potForce[0], agent.position[1] + potForce[1]];\n        new_position = this.correct_boundaries(new_position);\n\n        var nx = Math.floor(new_position[0] / this.current_range);\n        var ny = Math.floor(new_position[1] / this.current_range);\n\n        var arr_x = new Array();\n        for (var tmp_x of [nx-1, nx, nx+1]) {\n            if (tmp_x >= 0 && tmp_x <= Math.floor(this.width/this.current_range)) {\n                arr_x.push(tmp_x);\n            }\n        }\n        var arr_y = new Array();\n        for (var tmp_y of [ny-1, ny, ny+1]) {\n            if (tmp_y >= 0 && tmp_y <= Math.floor(this.height/this.current_range)) {\n                arr_y.push(tmp_y);\n            }\n        }\n\n        var uids_inRange = new Array();\n        var next;\n\n        for (var nx of arr_x) {\n            for (var ny of arr_y) {\n                next = this.lc[nx][ny]; // index des ersten agenten auslesen\n                if (next >= 0) {\n                    while (this.ll[next][0] != -1) { //solange atome in Zelle nx, ny\n                        if (agent.unique_id != this.ll[next][1]) {\n                            uids_inRange.push([this.ll[next][1], this.ll[next][2]]);\n                        }\n                        next = this.ll[next][0]; // find next agent in ll\n                    }\n                }\n            }\n        }\n\n        var overlap = new Array();\n        for (var ag of uids_inRange) {\n            if (distance(new_position, ag[1]) < this.agent_size) {\n                overlap.push(ag);\n            }\n        }\n        \n        // not done yet: todo\n\n        return new_position\n    }\n    */\n\n    correct_boundaries(pos) {\n        if (pos[0] < 0) {\n            pos[0] = 0;\n        } else if (pos[0] > this.width) {\n            pos[0] = this.width;\n        }\n        if (pos[1] < 0) {\n            pos[1] = 0;\n        } else if (pos[1] > this.height) {\n            pos[1] = this.height;\n        }\n\n        return pos\n    }\n\n    get_agents_inRange(agent, infection_range) {\n        // return uids of agents in range\n        var list = new Array();\n        var uids_pos_repulsion = this.inRange_linked_cell(agent.position, agent.unique_id, agent.model.repulsion_range, true); // [0]: uid; [1]: position\n        \n        for (var uid_pos of uids_pos_repulsion) {\n            if (distance(agent.position, uid_pos[1]) < infection_range) {\n                list.push(uid_pos[0]);\n            }\n        }\n\n        return list\n    }\n\n    move_agent(agent, new_position) {\n        \n        var found_index = this.agent_list.findIndex(element => element[0] == agent.unique_id);\n        var agent_inList = this.agent_list[found_index];\n\n        if (agent_inList.length) {\n            this.agent_list[found_index][1] = new_position;\n        } else {\n            console.log(\"Error moving agent\")\n        }\n    }\n}\n\nfunction range(start, end) {\n    var ans = [];\n    for (let i = start; i <= end; i++) {\n        ans.push(i);\n    }\n    return ans;\n}\n\nfunction distance(array1, array2) {\n    return Math.sqrt(Math.pow(array1[0] - array2[0], 2) + Math.pow(array1[1] - array2[1], 2));\n}\n\nfunction NAND(x, y) {\n\t// You can use whatever JS operators that you would like: &&, ||, !\n  return !(x && y);\n}\n\nexport {Space}","import { Susceptible } from \"model/agents/S-agent\"\nimport { Removed } from \"model/agents/R-agent\"\nimport { Infected } from \"model/agents/I-agent\"\nimport { Space } from \"model/Space\"\n\n\nclass SIR_Model {\n  // agent based SIR-Model\n    constructor(\n        population=200, \n        initial_infected=5, \n        infection_radius=2,\n        infection_probability_onContact=0.25,\n        duration_mean=5,\n        infection_recoginition_probability=0.8,\n        max_step=400,\n        stay_at_home=false,\n        stronger_repulsion=false,\n        exit_lock = false\n        ) {\n\n      this.population = population;\n      this.initial_infected = initial_infected;\n      this.infection_radius = infection_radius;\n      this.infection_probability_onContact = infection_probability_onContact;\n      this.duration_mean = duration_mean;\n      this.infection_recoginition_probability = infection_recoginition_probability;\n      this.max_step = max_step;\n      this.repulsion_range = 5; // has to be greater than infection range\n      this.steps_till_symptoms = 60;\n      \n      // map\n      this.width = 50;\n      this.height = 50;\n      \n      // controls\n      this.stay_at_home = stay_at_home;\n      this.stronger_repulsion = stronger_repulsion;\n      this.exit_lock = exit_lock;\n\n      // schedule - night - morning - work - afterwork - evening\n      this.steps_each_day = 70; // half an hour\n      this.step_num = 0;\n      this.day = 0;\n      this.current_mode = \"night\";\n      this.schedule = {\n        \"night\": 9,\n        \"morning\": 19,\n        \"work\": 44,\n        \"afterwork\": 58,\n        \"evening\": 69\n      }\n      this.schedule_random_activity = {\n        \"night\": 0.2,\n        \"morning\": 1.5,\n        \"work\": 0.2,\n        \"afterwork\": 1,\n        \"evening\": 0.5\n      }\n      this.schedule_speed = {\n        \"night\": 0.75,\n        \"morning\": 1.5,\n        \"work\": 2,\n        \"afterwork\": 1.75,\n        \"evening\": 1.25\n      }    \n    }\n    \n\n    reset() {\n      if (typeof this.s_list !== \"undefined\") {\n        //this.s_list.forEach(function(agent){ delete agent }); // no destructor?\n        delete this.s_list;\n      }\n\n      if (typeof this.r_list !== \"undefined\") {\n        //this.r_list.forEach(function(agent){ delete agent });\n        delete this.r_list\n      }\n\n      if (typeof this.i_list !== \"undefined\") {\n        //this.i_list.forEach(function(agent){ delete agent });\n        delete this.i_list\n      }\n      if (typeof this.space !== \"undefined\") {\n        delete this.space\n      }\n\n      // del every agent ?\n    }\n\n\n    initialize() {\n      if (this.infection_radius > this.repulsion_range) {\n        console.log(\"Error: Infection range has to be smaller or equal to repulsion range. Set to repulsion range\");\n        this.infection_radius = this.repulsion_range;\n      }\n\n      // agents\n      this.s_list = [];\n      this.r_list = [];\n      this.i_list = [];\n\n      // R0\n      this.old_R = new Array();\n      this.old_R.push(0);\n      this.old_I = new Array();\n      this.old_I.push(this.initial_infected);\n      this.old_S = new Array();\n      this.old_S.push(this.population - this.initial_infected);\n      this.R_array = new Array();\n\n      // grid world model\n      this.space = new Space(this.width, this.height);\n      \n      // schedule\n      this.day = 0;\n      this.step_num = 0;\n      this.current_mode = \"night\";\n\n      // setup population\n      var unique_id;\n      for (unique_id of range(1, (this.population - this.initial_infected))) {\n        var pos = this.space.get_random_position_empty(8);\n        var new_agent = new Susceptible(unique_id, pos, this, false, pos);\n\n        // register agent\n        this.s_list.push(new_agent);\n        this.space.add_agent(new_agent, pos, getRandomInt(1,3));\n      }\n\n      //setup infected agents\n      for (var u2 of range((unique_id + 1), (unique_id + this.initial_infected))) {\n        pos = this.space.get_random_position_empty(8);\n        new_agent = new Infected(u2, pos, this, false, pos);\n\n        // register agent\n        this.i_list.push(new_agent);\n        this.space.add_agent(new_agent, new_agent.home, getRandomInt(1,3));\n      }\n    }\n\n    set_stay_at_home(bool) {\n      this.stay_at_home = bool;\n    }\n\n    set_exit_lock(bool) {\n      this.exit_lock = bool;\n    }\n    \n    set_stronger_repulsion(bool) {\n      this.stronger_repulsion = bool;\n    }\n\n    set_spread_probability(bool) {\n      this.infection_probability_onContact = bool;\n    }\n\n\n    move_to_r(list_uids, from) {\n      var uid;\n\n      for (uid of list_uids) {\n        if (from == \"s\") {\n          var agent = this.s_list.filter(function(value, index, arr){ return value.unique_id === uid;})[0];\n          // delete\n          this.s_list = this.s_list.filter(function(value, index, arr){ return value.unique_id !== uid;});\n          // remove agent from world\n          this.space.remove_agent(agent);\n\n        } else if (from == \"i\") {\n          var agent = this.i_list.filter(function(value, index, arr){ return value.unique_id === uid;})[0];\n          // delete\n          this.i_list = this.i_list.filter(function(value, index, arr){ return value.unique_id !== uid;});\n          // remove agent from world\n          this.space.remove_agent(agent);\n\n        } else {\n          console.log(\"Error switching class to Removed\")\n        }\n\n        // add new\n        var new_agent = new Removed(agent.unique_id, agent.position, this, \n          agent.now_in_center, agent.home);\n        \n        new_agent.has_infected = agent.has_infected;\n\n        this.r_list.push(new_agent);        \n        this.space.add_agent(new_agent, new_agent.home, getRandomInt(1,3));\n      }\n    }\n\n\n    move_to_i(list_uids) {\n      var uid;\n\n      for (uid of list_uids) {\n        var agent = this.s_list.filter(function(value, index, arr){ return value.unique_id === uid;})[0];\n\n        // delete\n        this.s_list = this.s_list.filter(function(value, index, arr){ return value.unique_id !== uid;})\n        var att = this.space.get_agent_attributes(agent);\n        this.space.remove_agent(agent);\n\n        // add new\n        var new_agent = new Infected(agent.unique_id, agent.position, this, \n          agent.now_in_center, agent.home, agent.steps_since_infection);\n        \n        new_agent.has_infected = agent.has_infected;\n\n        this.i_list.push(new_agent);        \n        this.space.add_agent(new_agent, new_agent.home, att[0][3]); // infected dont go to work? , getRandomInt(1,2));\n      }\n    }\n\n\n    step_s(){\n      var to_r = [];\n      var to_i = [];\n\n      // iterate over every agent in s_list - apply step\n      for (var key in this.s_list) {\n        var [add_r, add_i] = this.s_list[key].step(); // if class change -> no move\n        if (add_r >= 0) {\n          to_r.push(add_r);\n        } else if (add_i >= 0) {\n          to_i.push(add_i);\n        }\n      }\n      \n      // move agents to other class\n      if (to_r.length > 0) {\n        this.move_to_r(to_r, \"s\");\n      } else if (to_i.length > 0) {\n        this.move_to_i(to_i);\n      }\n\n      // calculate count\n      var healthy = this.s_list.filter(function (el) {\n        return !el.infected\n      });\n\n      // return for statistics\n      return [healthy.length, this.s_list.length - healthy.length] \n    }\n\n\n    step_i(){\n      var to_r = [];\n\n      // iterate over every agent in s_list - apply step\n      for (var key in this.i_list) {\n        var add_r = this.i_list[key].step();\n        if (add_r >= 0) {\n          to_r.push(add_r);\n        }\n      }\n\n      // move agents to other class\n      if (to_r.length > 0) {\n        this.move_to_r(to_r, \"i\");\n      }\n\n      // return for statistics\n      return this.i_list.length\n    }\n\n      \n    step_r() {\n\n      // iterate over every agent in s_list - apply step\n      for (var key in this.r_list) {\n        this.r_list[key].step();\n      }\n\n      // return for statistics\n      return this.r_list.length\n    }\n\n    \n    calculate_R0(count_susceptible, count_infected, count_removed) {\n      // Todo: Basic reproduction number implementieren - https://web.stanford.edu/~jhj1/teachingdocs/Jones-Epidemics050308.pdf, https://wwwnc.cdc.gov/eid/article/25/1/17-1901_article\n      // R0 = βN / ν : β effective contact rate, ν removal rate; dr/dt = νi ; i = I/N, ds/dt = −βsi - https://en.wikipedia.org/wiki/Compartmental_models_in_epidemiology   \n\n      var R = this.old_R.slice(-this.steps_each_day);\n      const sum_R = R.reduce((a, b) => a + b, 0);\n      const dRdt = ((this.steps_each_day * count_removed - sum_R) / R.length) || 0;\n\n      var I = this.old_I.slice(-this.steps_each_day);\n      const sum_I = I.reduce((a, b) => a + b, 0);\n      const dIdt = ((this.steps_each_day * count_infected - sum_I) / I.length) || 0;\n\n      var gamma = (dRdt/count_infected + 0.01);\n\n      this.old_R.push(count_removed);\n      this.old_S.push(count_susceptible);\n      this.old_I.push(count_infected);\n\n      var R0 = ((dIdt /(gamma*count_infected) + 1) * this.population / count_susceptible);\n\n      if (this.day >= 1) {\n        console.log(\"R0:\" + R0);\n        return R0\n      } else {\n        return 0;\n      }\n      \n    }\n\n\n    calculate_mode() {\n      var daily_step = this.step_num % this.steps_each_day;\n      var mode;\n      if (daily_step <= this.schedule[\"night\"]) {\n        mode = \"night\"\n      } else if (daily_step > this.schedule[\"night\"] && daily_step <= this.schedule[\"morning\"]) {\n        mode = \"morning\"\n      } else if (daily_step > this.schedule[\"morning\"] && daily_step <= this.schedule[\"work\"]) {\n        mode = \"work\"\n      } else if (daily_step > this.schedule[\"work\"] && daily_step <= this.schedule[\"afterwork\"]) {\n        mode = \"afterwork\"\n      } else if (daily_step > this.schedule[\"afterwork\"] && daily_step <= this.schedule[\"evening\"]) {\n        mode = \"evening\"\n      }\n\n      return mode;\n    }\n\n\n    step() {\n      this.space.update_linked_cell(this.repulsion_range);\n\n      // get mode of current step\n      this.current_mode = this.calculate_mode();\n\n      // step for each class\n      var num_sus = this.step_s()\n      var num_inf = this.step_i()\n      var num_rem = this.step_r()\n      \n      var curr_R0 = this.calculate_R0(num_sus[0], (num_inf + num_sus[1]), num_rem);\n\n      console.log(\"Day: \"+ this.day);\n      console.log(\"Mode: \"+ this.current_mode);\n      console.log(\"Step - day-cycle: \"+ this.step_num % this.steps_each_day);\n\n      // update step count and day\n      this.step_num += 1;\n      this.day = Math.floor(this.step_num / this.steps_each_day);\n\n      if (num_inf + num_sus[1] == 0) {\n        return true;\n      } else {\n        return false;\n      }\n    }\n\n    // remove sleep - regelmäßiges aufrufen - step methoden bei aufruf\n    // depricated: run via App.js\n    async run() {\n      this.reset()\n      this.initialize()\n      for (var i of range(1, this.max_step)) {\n        console.log(\"Step: \"+i);\n        \n         var ret = this.step()\n         if (ret) {\n          console.log(\"Reached end of Simulation after \"+i+\"steps.\");\n          break\n         }\n\n        await Sleep(200);\n      }\n    }\n  }\n\nfunction range(start, end) {\n    var ans = [];\n    for (let i = start; i <= end; i++) {\n        ans.push(i);\n    }\n    return ans;\n}\n\nfunction Sleep(milliseconds) {\n  return new Promise(resolve => setTimeout(resolve, milliseconds));\n}\n\nfunction getRandomInt(min, max) {\n  min = Math.ceil(min);\n  max = Math.floor(max);\n  return Math.floor(Math.random() * (max - min + 1)) + min;\n}\n\nexport {SIR_Model}","import * as PIXI from \"pixi.js\";\nimport React, { useRef, useState, useEffect } from \"react\";\nimport WorkImage_1 from \"./icons8-business-buildings.svg\";\nimport WorkImage_2 from \"./icons8-organization.svg\";\nimport WorkImage_3 from \"./icons8-manufacturing.svg\";\nimport ParkImage from \"./icons8-park-with-street-light.svg\";\nimport { GlowFilter } from \"@pixi/filter-glow\";\n\nconst agents = {};\nlet susceptibleTex;\nlet infectedTex;\nlet infectedUnrecognizedTex;\nlet recoveredTex;\nlet app;\nlet mainContainer;\nlet initialRatio;\nconst renderingSize = 600;\nlet infoText;\n\nlet elapsedTime = 0.0;\n\nlet renderIds = false;\n\nlet tickerFunc;\n\nconst PixiRenderer = React.memo(\n  ({\n    worldState,\n    worldWidth,\n    worldHeight,\n    currentWidth,\n    currentHeight,\n    stepDuration,\n  }) => {\n    const stageContainer = useRef(null);\n\n    // Initial app setup and resize\n    useEffect(() => {\n      if (currentHeight && currentWidth && !app) {\n        initialRatio = currentHeight / currentWidth;\n        app = new PIXI.Application({\n          width: renderingSize,\n          height: renderingSize,\n          transparent: true,\n        });\n        mainContainer = new PIXI.Container();\n        app.stage.addChild(mainContainer);\n        stageContainer.current.appendChild(app.view);\n\n        let gr = new PIXI.Graphics();\n        gr.beginFill(0x000000);\n        gr.lineStyle(0);\n        gr.drawCircle(\n          renderingSize / worldWidth,\n          renderingSize / worldHeight,\n          Math.min(renderingSize / worldWidth, renderingSize / worldHeight)\n        );\n        gr.endFill();\n\n        susceptibleTex = app.renderer.generateTexture(gr);\n\n        gr = new PIXI.Graphics();\n        gr.beginFill(0xff0000);\n        gr.lineStyle(0);\n        gr.drawCircle(\n          renderingSize / worldWidth,\n          renderingSize / worldHeight,\n          Math.min(renderingSize / worldWidth, renderingSize / worldHeight)\n        );\n        gr.endFill();\n\n        infectedTex = app.renderer.generateTexture(gr);\n\n        gr = new PIXI.Graphics();\n        gr.beginFill(0x0000ff);\n        gr.lineStyle(0);\n        gr.drawCircle(\n          renderingSize / worldWidth,\n          renderingSize / worldHeight,\n          Math.min(renderingSize / worldWidth, renderingSize / worldHeight)\n        );\n        gr.endFill();\n\n        infectedUnrecognizedTex = app.renderer.generateTexture(gr);\n\n        gr = new PIXI.Graphics();\n        gr.beginFill(0x00ff00);\n        gr.lineStyle(0);\n        gr.drawCircle(\n          renderingSize / worldWidth,\n          renderingSize / worldHeight,\n          Math.min(renderingSize / worldWidth, renderingSize / worldHeight)\n        );\n        gr.endFill();\n\n        recoveredTex = app.renderer.generateTexture(gr);\n      }\n      if (app && currentHeight && currentWidth) {\n        let w;\n        let h;\n        if (currentHeight / currentWidth >= initialRatio) {\n          w = currentWidth * initialRatio;\n          h = currentHeight;\n        } else {\n          w = currentWidth;\n          h = currentHeight / initialRatio;\n        }\n        app.renderer.view.style.width = w + \"px\";\n        app.renderer.view.style.height = h + \"px\";\n      }\n    }, [currentHeight, currentWidth]);\n\n    // Game loop setup\n    useEffect(() => {\n      if (\n        !app ||\n        !mainContainer ||\n        !worldHeight ||\n        !worldWidth ||\n        !stepDuration ||\n        isNaN(renderingSize)\n      ) {\n        return;\n      }\n      app.ticker.remove(tickerFunc);\n      tickerFunc = (deltaTime) => {\n        elapsedTime += deltaTime / PIXI.settings.TARGET_FPMS / 1000;\n        Object.keys(agents).forEach((unique_id) => {\n          let agentInfo = agents[unique_id];\n\n          agentInfo.sprite.x =\n            agentInfo.oldPos[0] * (renderingSize / worldWidth) +\n            (agentInfo.agent.position[0] * (renderingSize / worldWidth) -\n              agentInfo.oldPos[0] * (renderingSize / worldWidth)) *\n              Math.min(elapsedTime / stepDuration, 1.0);\n          agentInfo.sprite.y =\n            agentInfo.oldPos[1] * (renderingSize / worldHeight) +\n            (agentInfo.agent.position[1] * (renderingSize / worldHeight) -\n              agentInfo.oldPos[1] * (renderingSize / worldHeight)) *\n              Math.min(elapsedTime / stepDuration, 1.0);\n\n          if (renderIds) {\n            agentInfo.text.x = agentInfo.sprite.x;\n            agentInfo.text.y = agentInfo.sprite.y + renderingSize / worldHeight;\n          }\n        });\n      };\n      app.ticker.add(tickerFunc);\n    }, [app, mainContainer, worldHeight, worldWidth, stepDuration]);\n\n    // Initial world state setup\n    useEffect(() => {\n      if (app && mainContainer && worldState.hotSpots) {\n        worldState.hotSpots.forEach((hotSpot) => {\n          let hotSpotTex;\n          if (hotSpot.group < 0 && (hotSpot.tag === \"default\" || hotSpot.tag === \"park\")) {\n            let gr = new PIXI.Graphics();\n            gr.beginFill(0x00ffff, 0.2);\n            gr.lineStyle(0);\n            gr.drawCircle(\n              hotSpot.strength * renderingSize,\n              hotSpot.strength * renderingSize,\n              Math.min(\n                hotSpot.strength * renderingSize,\n                hotSpot.strength * renderingSize\n              )\n            );\n            gr.endFill();\n            hotSpotTex = app.renderer.generateTexture(gr);\n            var strengthFactor = hotSpot.range / worldWidth;\n          } else if(hotSpot.group == 1 && hotSpot.tag === \"default\") {\n            hotSpotTex = PIXI.Texture.from(WorkImage_1);\n            var strengthFactor = 0.2 * hotSpot.strength;\n\n          } else if(hotSpot.group == 2 && hotSpot.tag === \"default\") {\n            hotSpotTex = PIXI.Texture.from(WorkImage_2);\n            var strengthFactor = 0.2 * hotSpot.strength;\n\n          } else if(hotSpot.group == 3 && hotSpot.tag === \"default\") {\n            hotSpotTex = PIXI.Texture.from(WorkImage_3);\n            var strengthFactor = 0.2 * hotSpot.strength;\n\n          }\n          let hotSpotSprite = new PIXI.Sprite(hotSpotTex);\n          hotSpotSprite.x =\n            hotSpot.pos[0] * (renderingSize / worldWidth) -\n            (strengthFactor * renderingSize) / 2;\n          hotSpotSprite.y =\n            hotSpot.pos[1] * (renderingSize / worldHeight) -\n            (strengthFactor * renderingSize) / 2;\n          hotSpotSprite.width = strengthFactor * renderingSize;\n          hotSpotSprite.height = strengthFactor * renderingSize;\n          mainContainer.addChild(hotSpotSprite);\n\n          if(hotSpot.tag === \"park\") {\n            hotSpotTex = PIXI.Texture.from(ParkImage);\n            var strengthFactor = 0.2 * hotSpot.strength;\n\n            let hotSpotSprite = new PIXI.Sprite(hotSpotTex);\n            hotSpotSprite.x =\n              hotSpot.pos[0] * (renderingSize / worldWidth) -\n              (strengthFactor * renderingSize) / 2;\n            hotSpotSprite.y =\n              hotSpot.pos[1] * (renderingSize / worldHeight) -\n              (strengthFactor * renderingSize) / 2;\n            hotSpotSprite.width = strengthFactor * renderingSize;\n            hotSpotSprite.height = strengthFactor * renderingSize;\n            mainContainer.addChild(hotSpotSprite);\n          }\n        });\n      }\n    }, [app, mainContainer]);\n\n    // Updates in every rerender...\n    Object.keys(agents).forEach((unique_id) => {\n      let index = worldState.agentList.findIndex((agent) => {\n        return agent.unique_id == unique_id;\n      });\n      if (index === -1) {\n        mainContainer.removeChild(agents[unique_id].sprite);\n        if (renderIds) {\n          mainContainer.removeChild(agents[unique_id].text);\n        }\n        delete agents[unique_id];\n      } else {\n        agents[unique_id].oldPos = agents[unique_id].agent.position;\n        agents[unique_id].oldState = agents[unique_id].agent.state;\n\n        agents[unique_id].agent = worldState.agentList[index];\n      }\n    });\n\n    if (app && mainContainer && worldState) {\n      worldState.agentList.forEach((agent) => {\n        let sprite;\n        let text;\n        if (agent.unique_id in agents) {\n          sprite = agents[agent.unique_id].sprite;\n          if (renderIds) {\n            text = agents[agent.unique_id].text;\n          }\n        } else {\n          sprite = new PIXI.Sprite(susceptibleTex);\n\n          sprite.width = renderingSize / worldWidth;\n          sprite.height = renderingSize / worldHeight;\n          mainContainer.addChild(sprite);\n          if (renderIds) {\n            text = new PIXI.Text(agent.unique_id.toString(), {\n              fontFamily: \"Arial\",\n              fontSize: 10,\n              fill: 0x5555ff,\n              align: \"center\",\n            });\n            mainContainer.addChild(text);\n          }\n\n          agents[agent.unique_id] = {\n            text: text,\n            sprite: sprite,\n            agent: agent,\n            oldPos: agent.position,\n            oldState: agent.state,\n          };\n        }\n        if (agent.state == \"infected\") {\n          sprite.texture = infectedTex;\n          if (agents[agent.unique_id].oldState !== \"infected\") {\n            sprite.filters = [\n              new GlowFilter({\n                distance: 15,\n                outerStrength: 2,\n                color: 0xff0000,\n              }),\n            ];\n          } else {\n            sprite.filters = [];\n          }\n        } else if (agent.state == \"infected_unrecognized\") {\n          sprite.texture = infectedUnrecognizedTex;\n          if (agents[agent.unique_id].oldState !== \"infected_unrecognized\") {\n            sprite.filters = [\n              new GlowFilter({\n                distance: 15,\n                outerStrength: 2,\n                color: 0x0000ff,\n              }),\n            ];\n          } else {\n            sprite.filters = [];\n          }\n        } else if (agent.state == \"recovered\") {\n          sprite.texture = recoveredTex;\n          if (agents[agent.unique_id].oldState !== \"recovered\") {\n            sprite.filters = [\n              new GlowFilter({\n                distance: 15,\n                outerStrength: 2,\n                color: 0x00ff00,\n              }),\n            ];\n          } else {\n            sprite.filters = [];\n          }\n        } else if (agent.state == \"susceptible\") {\n          sprite.texture = susceptibleTex;\n        }\n      });\n    }\n\n    // Display info screen if paused or stopped\n    if (\n      app &&\n      (worldState.state == \"stopped\" || worldState.state == \"paused\")\n    ) {\n      app.stage.removeChild(infoText);\n      mainContainer.filters = [new PIXI.filters.BlurFilter(12, 4, 1, 5)];\n      infoText = new PIXI.Text(`The simulation is ${worldState.state}.`, {\n        fontFamily: \"Arial\",\n        fontSize: 24,\n        fill: 0x000000,\n        align: \"center\",\n      });\n      infoText.x = (renderingSize - infoText.width) / 2;\n      infoText.y = (renderingSize - infoText.height) / 2;\n      app.stage.addChild(infoText);\n      infoText.filters = [];\n    } else if (app && mainContainer) {\n      mainContainer.filters = [];\n      app.stage.removeChild(infoText);\n    }\n\n    elapsedTime = 0.0;\n    return <div ref={stageContainer}></div>;\n  }\n);\n\nexport { PixiRenderer };\n","import React from \"react\";\nimport { Box, Typography } from \"@material-ui/core\";\nimport DayIcon from \"@material-ui/icons/WbSunny\";\nimport NightIcon from \"@material-ui/icons/NightsStay\";\n\nconst TimeDisplay = React.memo(({ time, mode }) => {\n  let isNight = mode === \"night\" || mode === \"evening\";\n  return (\n    <Box\n      display=\"flex\"\n      direction=\"column\"\n      alignItems=\"center\"\n      justify=\"center\"\n      p={2}\n    >\n      {isNight && <NightIcon />}\n      {!isNight && <DayIcon />}&nbsp;&nbsp;\n      <Typography variant=\"overline\">{time}</Typography>\n      \n    </Box>\n  );\n});\n\nexport { TimeDisplay };\n","import React from \"react\";\nimport { Line } from \"react-chartjs-2\";\n\nconst LineChart = React.memo(({ height, width, chartData, chartRef }) => {\n  return (\n    chartData && (\n      <Line\n        ref={chartRef}\n        data={chartData}\n        height={height}\n        width={width}\n        showTooltips={false}\n        options={{\n          maintainAspectRatio: false,\n          responsive: false,\n          elements: {\n            point: {\n              radius: 0,\n            },\n          },\n        }}\n      />\n    )\n  );\n});\nexport { LineChart };\n","import React, { useEffect, useState, useRef } from \"react\";\nimport { SIR_Model } from \"model/Model\";\nimport {\n  AppBar,\n  Toolbar,\n  Typography,\n  Box,\n  Container,\n  Grid,\n  Slider,\n  MenuItem,\n  Select,\n  Button,\n  Divider,\n  FormControlLabel,\n  Switch,\n} from \"@material-ui/core\";\nimport { PixiRenderer } from \"components/PixiRenderer\";\nimport { TimeDisplay } from \"components/TimeDisplay\";\nimport { LineChart } from \"components/LineChart\";\nimport { SizeMe } from \"react-sizeme\";\n\nlet interval = null;\nlet model = null;\n\nlet history = [];\n\nfunction App() {\n  // For rendering\n  const [worldState, setWorldState] = useState({\n    agentList: [],\n    hotSpots: [],\n    chartData: { labels: [], datasets: [] },\n    time: \"00:00\",\n    dayPhase: \"day\",\n    state: \"stopped\",\n  });\n\n  const [worldWidth, setWorldWidth] = useState(undefined);\n  const [worldHeight, setWorldHeight] = useState(undefined);\n\n  // Configuration\n  const [initialInfected, setInitialInfected] = useState(5);\n  const [initialSuspectible, setInitialSuspectible] = useState(200);\n  const [probabilityRecognized, setProbabilityRecognized] = useState(0.3);\n  const [infectionRadius, setInfectionRadius] = useState(2);\n  const [spreadProbability, setSpreadProbability] = useState(0.01);\n  const [strongerRepulsion, setStrongerRepulsion] = useState(false);\n  const [stayAtHome, setStayAtHome] = useState(false);\n  const [stayAtHomeAll, setStayAtHomeAll] = useState(false);\n  const [infectionDuration, setInfectionDuration] = useState(5);\n  const [profile, setProfile] = useState(\"unrestricted\");\n  const [stepDuration, setStepDuration] = useState(0.5);\n\n  const chartRef = useRef(null);\n\n  useEffect(() => {\n    model = new SIR_Model(\n      initialSuspectible,\n      initialInfected,\n      infectionRadius,\n      spreadProbability,\n      20,\n      probabilityRecognized,\n      999999999999,\n      stayAtHome,\n      strongerRepulsion,\n      stayAtHomeAll\n    );\n\n    model.reset();\n    model.initialize();\n    setWorldHeight(model.height);\n    setWorldWidth(model.width);\n  }, []);\n\n  useEffect(() => {\n    let newWorldState = { ...worldState };\n    let space = model.space;\n\n    let newHotSpots = space.attractive_points.map((attractivePoint) => {\n      return {\n        pos: attractivePoint[0],\n        strength: attractivePoint[1],\n        range: attractivePoint[3],\n        group: attractivePoint[4],\n        tag: attractivePoint[5]\n      };\n    });\n    newWorldState.hotSpots = newHotSpots;\n    setWorldState(newWorldState);\n  }, [model]);\n\n  useEffect(() => {\n    clearInterval(interval)\n    if (worldState.state === \"running\") {\n      interval = setInterval(() => {\n        let newWorldState = { ...worldState };\n\n        let newInfectedCount = 0;\n        let newInfectedUnrecognizedCount = 0;\n        let newSusceptibleCount = 0;\n        let newRecoveredCount = 0;\n\n        let isSimulationEnd = model.step();\n        let hour =\n          (model.step_num % model.steps_each_day) * (24 / model.steps_each_day);\n        let newTime = new Date();\n        newTime.setSeconds(0);\n        newTime.setMinutes((hour % 1) * 60);\n        newTime.setHours(hour);\n        newWorldState.time = newTime.toLocaleTimeString(\"en-US\");\n\n        newWorldState.dayPhase = model.current_mode;\n\n        let newAgentList = [];\n        let newSList = model.s_list.map((agent) => {\n          if (agent.infected === true) {\n            agent.state = \"infected_unrecognized\";\n            newInfectedUnrecognizedCount += 1;\n          } else {\n            agent.state = \"susceptible\";\n            newSusceptibleCount += 1;\n          }\n\n          return Object.assign({}, agent);\n        });\n\n        newAgentList.push(...newSList);\n\n        let newIList = model.i_list.map((agent) => {\n          agent.state = \"infected\";\n          newInfectedCount += 1;\n          return Object.assign({}, agent);\n        });\n        newAgentList.push(...newIList);\n\n        let newRList = model.r_list.map((agent) => {\n          agent.state = \"recovered\";\n          newRecoveredCount += 1;\n          return Object.assign({}, agent);\n        });\n        newAgentList.push(...newRList);\n\n        newWorldState.agentList = newAgentList;\n        if (isSimulationEnd) {\n          clearInterval(interval);\n          newWorldState.state = \"stopped\";\n        }\n\n        let newHistoryElement = {\n          infected: newInfectedCount,\n          infectedUnrecognized: newInfectedUnrecognizedCount,\n          recovered: newRecoveredCount,\n          susceptible: newSusceptibleCount,\n        };\n\n        let newHistory = [...history];\n        newHistory.push(newHistoryElement);\n        history = newHistory;\n\n        let newLabels = [];\n        let newSDataset = {\n          label: \"Susceptible\",\n          fill: true,\n          lineTension: 0.1,\n          borderColor: \"rgba(0,0,0,1)\",\n          data: [],\n        };\n        let newIDataset = {\n          label: \"Infected\",\n          fill: true,\n          lineTension: 0.1,\n          borderColor: \"rgba(255,0,0,1)\",\n          data: [],\n        };\n        let newIIRDataset = {\n          label: \"All Infected\",\n          fill: true,\n          lineTension: 0.1,\n          borderColor: \"rgba(255,0,0,0.4)\",\n          data: [],\n        };\n\n        let newRDataset = {\n          label: \"Recovered\",\n          fill: true,\n          lineTension: 0.1,\n          borderColor: \"rgba(0,255,0,1)\",\n          pointBackgroundColor: \"#fff\",\n          pointBorderWidth: 1,\n          pointHoverRadius: 5,\n          data: [],\n        };\n        newHistory.forEach((histEl, index) => {\n          newSDataset.data.push(histEl.susceptible);\n          newIDataset.data.push(histEl.infected);\n          newRDataset.data.push(histEl.recovered);\n          newIIRDataset.data.push(histEl.infected + histEl.infectedUnrecognized)\n          newLabels.push(index);\n        });\n\n        let newChartData = {\n          labels: newLabels,\n          datasets: [newIDataset, newRDataset, newSDataset, newIIRDataset],\n        };\n        newWorldState.chartData = newChartData;\n\n        setWorldState(newWorldState);\n      }, stepDuration * 1000);\n    } else {\n      clearInterval(interval)\n    }\n  }, [worldState.state, stepDuration]);\n\n  return (\n    <Box display=\"flex\" flexDirection=\"column\" className=\"App\" height=\"100%\">\n      <AppBar position=\"static\">\n        <Toolbar>\n          <Typography variant=\"h6\">SIR Playground</Typography>\n        </Toolbar>\n      </AppBar>\n      <Box mt={2} mb={2} flexGrow={1} overflow=\"hidden\">\n        <Container style={{ height: \"100%\" }}>\n          <Grid container spacing={2} style={{ height: \"100%\" }}>\n            <Grid item xs={4} height=\"100%\">\n              <Box p={2}>\n                <Typography variant=\"overline\" gutterBottom>\n                  Initial Infected\n                </Typography>\n                <Slider\n                  valueLabelDisplay=\"auto\"\n                  step={1}\n                  marks\n                  min={1}\n                  max={10}\n                  value={initialInfected}\n                  onChange={(event, newValue) => {\n                    setInitialInfected(newValue);\n                  }}\n                />\n                <Typography variant=\"overline\" gutterBottom>\n                  Population\n                </Typography>\n                <Slider\n                  valueLabelDisplay=\"auto\"\n                  step={25}\n                  marks\n                  min={25}\n                  max={500}\n                  value={initialSuspectible}\n                  onChange={(event, newValue) => {\n                    setInitialSuspectible(newValue);\n                  }}\n                />\n                <Typography variant=\"overline\" gutterBottom>\n                  Probability Recognized\n                </Typography>\n                <Slider\n                  valueLabelDisplay=\"auto\"\n                  step={0.1}\n                  marks\n                  min={0}\n                  max={1}\n                  value={probabilityRecognized}\n                  onChange={(event, newValue) => {\n                    setProbabilityRecognized(newValue);\n                  }}\n                />\n                <Typography variant=\"overline\" gutterBottom>\n                  Infection Radius\n                </Typography>\n                <Slider\n                  valueLabelDisplay=\"auto\"\n                  step={1}\n                  marks\n                  min={2}\n                  max={4}\n                  value={infectionRadius}\n                  onChange={(event, newValue) => {\n                    setInfectionRadius(newValue);\n                  }}\n                />\n\n                <Typography variant=\"overline\" gutterBottom>\n                  Mean Infection Duration\n                </Typography>\n                <Slider\n                  valueLabelDisplay=\"auto\"\n                  step={1}\n                  marks\n                  min={3}\n                  max={8}\n                  value={infectionDuration}\n                  onChange={(event, newValue) => {\n                    setInfectionDuration(newValue);\n                  }}\n                />\n\n                <Typography variant=\"overline\" gutterBottom>\n                  Spread Probability\n                </Typography>\n                <br />\n                <FormControlLabel\n                  control={\n                    <Switch\n                      checked={spreadProbability >= 0.1}\n                      onChange={(event) => {\n                        if (event.target.checked) {\n                          setSpreadProbability(0.1);\n                          model.set_spread_probability(0.1);\n                        } else {\n                          setSpreadProbability(0.01);\n                          model.set_spread_probability(0.01);\n                        }\n                      }}\n                    />\n                  }\n                  label=\"Increased Probability\"\n                />\n                <br />\n\n                <Typography variant=\"overline\" gutterBottom>\n                  Social distancing\n                </Typography>\n                <br />\n                <FormControlLabel\n                  control={\n                    <Switch\n                      checked={strongerRepulsion}\n                      onChange={(event) => {\n                        if (event.target.checked) {\n                          setStrongerRepulsion(true);\n                          model.set_stronger_repulsion(true);\n                        } else {\n                          setStrongerRepulsion(false);\n                          model.set_stronger_repulsion(false);\n                        }\n                      }}\n                    />\n                  }\n                  label=\"Try to hold distance\"\n                />\n                <br />\n\n                <Typography variant=\"overline\" gutterBottom>\n                  Stay at home\n                </Typography>\n                <br />\n                <FormControlLabel\n                  control={\n                    <Switch\n                      checked={stayAtHome}\n                      onChange={(event) => {\n                        if (event.target.checked) {\n                          setStayAtHome(true);\n                          model.set_stay_at_home(true);\n                        } else {\n                          setStayAtHome(false);\n                          model.set_stay_at_home(false);\n                        }\n                      }}\n                    />\n                  }\n                  label=\"Infected\"\n                />\n                <br />\n                <FormControlLabel\n                  control={\n                    <Switch\n                      checked={stayAtHomeAll}\n                      onChange={(event) => {\n                        if (event.target.checked) {\n                          setStayAtHomeAll(true);\n                          setStayAtHome(true);\n                          \n                          model.set_stay_at_home(true);\n                          model.set_exit_lock(true);\n                        } else {\n                          setStayAtHomeAll(false);\n                          setStayAtHome(false);\n\n                          \n                          model.set_stay_at_home(false);\n                          model.set_exit_lock(false);\n                        }\n                      }}\n                    />\n                  }\n                  label=\"Everybody\"\n                />\n                <br />\n\n                <Typography variant=\"overline\" gutterBottom>\n                  Profile\n                </Typography>\n                <br />\n                <Select\n                  fullWidth\n                  variant=\"outlined\"\n                  value={profile}\n                  onChange={(event) => {\n                    setProfile(event.target.value);\n                  }}\n                >\n                  <MenuItem value={\"unrestricted\"}>Unrestricted</MenuItem>\n                  <MenuItem value={\"shopping_work\"}>\n                    Shopping &amp; Work\n                  </MenuItem>\n                  <MenuItem value={\"meet_friends\"}>Meet Friends</MenuItem>\n                </Select>\n                <Divider />\n                <Typography variant=\"overline\" gutterBottom>\n                  Step Period (s)\n                </Typography>\n                <Slider\n                  valueLabelDisplay=\"auto\"\n                  step={0.1}\n                  marks\n                  min={0.1}\n                  max={2.0}\n                  value={stepDuration}\n                  onChange={(event, newValue) => {\n                    setStepDuration(newValue);\n                  }}\n                />\n                <Box mt={2}>\n                  <Button\n                    color=\"primary\"\n                    variant=\"contained\"\n                    size=\"large\"\n                    onClick={() => {\n                      let newWorldState = { ...worldState };\n                      if (worldState.state == \"running\") {\n                        newWorldState.state = \"paused\";\n                        clearInterval(interval);\n                      } else {\n                        if (worldState.state == \"stopped\") {\n                          model = new SIR_Model(\n                            initialSuspectible,\n                            initialInfected,\n                            infectionRadius,\n                            spreadProbability,\n                            infectionDuration,\n                            probabilityRecognized,\n                            999999999999,\n                            stayAtHome,\n                            strongerRepulsion,\n                            stayAtHomeAll\n                          );\n\n                          model.reset();\n                          model.initialize();\n                          setWorldHeight(model.height);\n                          setWorldWidth(model.width);\n                        }\n\n                        newWorldState.state = \"running\";\n                      }\n                      setWorldState(newWorldState);\n                    }}\n                  >\n                    {worldState.state === \"running\" ? \"Pause\" : \"Start\"}\n                  </Button>\n                  &nbsp;&nbsp;\n                  <Button\n                    color=\"primary\"\n                    variant=\"contained\"\n                    size=\"large\"\n                    onClick={() => {\n                      let newWorldState = { ...worldState };\n                      history = [];\n                      newWorldState.state = \"stopped\";\n                      setWorldState(newWorldState);\n                    }}\n                  >\n                    Reset\n                  </Button>\n                </Box>\n              </Box>\n            </Grid>\n            <Grid item xs={6}>\n              <SizeMe monitorHeight>\n                {({ size }) => {\n                  let minDim = Math.min(size.width, size.height * 0.7);\n                  return (\n                    <Box\n                      height=\"100%\"\n                      display=\"flex\"\n                      flexDirection=\"column\"\n                      overflow=\"hidden\"\n                    >\n                      <PixiRenderer\n                        worldState={worldState}\n                        worldWidth={worldWidth}\n                        worldHeight={worldHeight}\n                        currentWidth={minDim}\n                        currentHeight={minDim}\n                        stepDuration={stepDuration}\n                      />\n                      {!isNaN(size.height) &&\n                        !isNaN(size.width) &&\n                        worldState.chartData && (\n                          <LineChart\n                            height={size.height - minDim - 10}\n                            width={size.width}\n                            chartData={worldState.chartData}\n                            chartRef={chartRef}\n                          />\n                        )}\n                    </Box>\n                  );\n                }}\n              </SizeMe>\n            </Grid>\n            <Grid item xs={2}>\n              <TimeDisplay time={worldState.time} mode={worldState.dayPhase} />\n            </Grid>\n          </Grid>\n        </Container>\n      </Box>\n    </Box>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"containers/App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}