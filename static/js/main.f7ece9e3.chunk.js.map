{"version":3,"sources":["components/icons8-business-buildings.svg","components/icons8-organization.svg","components/icons8-manufacturing.svg","components/icons8-park-with-street-light.svg","model/agents/basic-agent.js","model/agents/S-agent.js","model/agents/R-agent.js","model/agents/I-agent.js","model/Space.js","model/Model.js","components/PixiRenderer.js","components/TimeDisplay.js","components/StatsDisplay.js","components/LineChart.js","containers/App.js","serviceWorker.js","index.js"],"names":["module","exports","Agent","unique_id","position","model","now_in_center","home","undefined","has_infected","this","dx","Math","random","dy","movement","next_moves","space","get_neighborhood_empty","push","next_move","moves","floor","length","move_agent","potForce","get_potential_force","normalize_2D","x","y","random_multiplier","schedule_random_activity","current_mode","schedule_speed","className","stay_at_home","stronger_repulsion","exit_lock","correct_boundaries","agents_inRange_UIDS","get_agents_inRange","infection_radius","uid","agent","s_list","filter","object","index","arr","infected","infection_probability_onContact","array","norm","sqrt","pow","Susceptible","steps_since_infection","duration","duration_mean","getRandomInt","to_i","to_r","steps_till_symptoms","steps_each_day","infection_recoginition_probability","spread_infection","hotspot_move","min","max","ceil","Removed","Infected","Space","width","height","agent_size","agent_list","lc","Array","map","fill","ll","home_multiplier","work_multiplier","repulsion_force_multiplier","attractive_points","load_world_layout","selection","add_attraction_at","multiplier","active_at","influence_range","group","tag","uid_list","positions","agents_inrange","value","includes","ag","alpha","beta","force_x_rep","force_y_rep","force_x_att","force_y_att","inRange_linked_cell","repulsion_range","pos","get_local_repulsion_positions","current_agent","p","dist","distance","U_grad_rep","att","NAND","grad_x","grad_y","range","current_range","splice","reset_linked_cell","n","nx","ny","next","uids","current_position","with_position","uids_inRange","filtered","console","log","radius_att_points","agents_in_position","element","att_point_valid_dist","infection_range","list","uids_pos_repulsion","uid_pos","new_position","found_index","findIndex","array1","array2","SIR_Model","population","initial_infected","max_step","step_num","day","schedule","r_list","i_list","old_R","old_I","old_S","R_array","get_random_position_empty","new_agent","add_agent","u2","bool","list_uids","from","remove_agent","get_agent_attributes","key","step","add_r","add_i","move_to_r","move_to_i","healthy","el","count_susceptible","count_infected","count_removed","R","slice","sum_R","reduce","a","b","dRdt","I","sum_I","dIdt","gamma","R0","mode","daily_step","update_linked_cell","calculate_mode","num_sus","step_s","num_inf","step_i","num_rem","step_r","curr_R0","calculate_R0","reset","initialize","i","Sleep","start","end","ans","milliseconds","Promise","resolve","setTimeout","susceptibleTex","infectedTex","infectedUnrecognizedTex","recoveredTex","app","mainContainer","infoText","tickerFunc","agents","hotSpots","elapsedTime","PixiRenderer","React","memo","worldState","worldWidth","worldHeight","stepDuration","stageContainer","useRef","useEffect","PIXI","transparent","resizeTo","current","autoDensity","stage","addChild","appendChild","view","gr","beginFill","lineStyle","drawCircle","endFill","renderer","generateTexture","isNaN","ticker","remove","deltaTime","TARGET_FPMS","Object","keys","forEach","agentInfo","heightWidth","sprite","oldPos","hotSpotInfo","strengthFactor","posX","posY","add","hotSpot","hotSpotTex","strength","WorkImage_1","WorkImage_2","WorkImage_3","hotSpotSprite","ParkImage","agentList","removeChild","oldState","state","text","texture","filters","GlowFilter","outerStrength","color","BlurFilter","fontFamily","fontSize","align","style","ref","TimeDisplay","time","isNight","Grid","Box","display","direction","alignItems","justify","Typography","variant","StatsDisplay","chartData","sus","i_all","r","datasets","data","LineChart","chartRef","showTooltips","options","maintainAspectRatio","responsive","elements","point","radius","interval","history","App","useState","labels","dayPhase","setWorldState","setWorldWidth","setWorldHeight","initialInfected","setInitialInfected","initialSuspectible","setInitialSuspectible","probabilityRecognized","setProbabilityRecognized","infectionRadius","setInfectionRadius","spreadProbability","setSpreadProbability","strongerRepulsion","setStrongerRepulsion","stayAtHome","setStayAtHome","stayAtHomeAll","setStayAtHomeAll","infectionDuration","setInfectionDuration","setStepDuration","newWorldState","newHotSpots","attractivePoint","clearInterval","setInterval","newInfectedCount","newInfectedUnrecognizedCount","newSusceptibleCount","newRecoveredCount","isSimulationEnd","hour","newTime","Date","setSeconds","setMinutes","setHours","toLocaleTimeString","newAgentList","newSList","assign","newIList","newRList","newHistoryElement","infectedUnrecognized","recovered","susceptible","newHistory","newLabels","newSDataset","label","lineTension","borderColor","newIDataset","newIIRDataset","newRDataset","pointBackgroundColor","pointBorderWidth","pointHoverRadius","histEl","newChartData","flexDirection","AppBar","Toolbar","mt","mb","flexGrow","Container","container","spacing","item","xs","sm","md","lg","gutterBottom","Slider","valueLabelDisplay","marks","onChange","event","newValue","FormControlLabel","control","Switch","checked","target","set_spread_probability","set_stronger_repulsion","set_stay_at_home","set_exit_lock","Divider","Button","size","onClick","overflow","justifyContent","Link","href","location","buttonText","cookieName","background","buttonStyle","expires","onAccept","acceptedByScrolling","ReactGA","pageview","window","pathname","Boolean","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.f7ece9e3.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/icons8-business-buildings.d40fc481.svg\";","module.exports = __webpack_public_path__ + \"static/media/icons8-organization.4b917871.svg\";","module.exports = __webpack_public_path__ + \"static/media/icons8-manufacturing.6a1458e1.svg\";","module.exports = __webpack_public_path__ + \"static/media/icons8-park-with-street-light.9024a2d1.svg\";","import { Susceptible } from \"./S-agent\";\r\n\r\nclass Agent{\r\n    constructor(unique_id, position, model, now_in_center=false,\r\n        home=undefined, has_infected=0){\r\n            this.unique_id = unique_id;\r\n            this.position = position;\r\n            this.now_in_center = now_in_center;\r\n            this.model = model;\r\n            this.home = home;\r\n            this.has_infected = has_infected;\r\n\r\n            this.dx = (Math.random() - 0.5) * 2;\r\n            this.dy = (Math.random() - 0.5) * 2;\r\n        }\r\n    \r\n    // movement\r\n    move() {\r\n        if (this.model.movement === \"random\"){\r\n            var next_moves = this.model.space.get_neighborhood_empty(this.position);\r\n            next_moves.push(this.position);\r\n\r\n            var next_move = random_choice(next_moves);\r\n\r\n        } else if (this.model.movement === \"center\") {\r\n            // todo\r\n        }\r\n\r\n        // admin overhead in space - world\r\n        this.position = next_move;\r\n        this.model.space.move_agent(this, next_move);\r\n    }\r\n\r\n    // movement\r\n    hotspot_move() {\r\n        // todo: fix parameters, random, pot and last step\r\n        var potForce = this.model.space.get_potential_force(this);\r\n        potForce = normalize_2D(potForce);\r\n                    \r\n        // random activity\r\n        var random_multiplier = this.model.schedule_random_activity[this.model.current_mode];\r\n        var schedule_speed = this.model.schedule_speed[this.model.current_mode];\r\n        if (!(NAND(this.className == \"Infected\", this.model.stay_at_home))) {\r\n            random_multiplier = 0;\r\n            schedule_speed = 0.5;\r\n        } else if (this.model.stronger_repulsion) {\r\n            random_multiplier = 0;\r\n        } else if (this.model.exit_lock) {\r\n            random_multiplier = 0;\r\n            schedule_speed *= 0.5;\r\n        }\r\n        \r\n        potForce[0] += this.dx + random_multiplier * (Math.random() - 0.5) * 2;\r\n        potForce[1] += this.dy + random_multiplier * (Math.random() - 0.5) * 2;\r\n        \r\n        // normalize Force - maybe scale instead? 0-2?\r\n        potForce = normalize_2D(potForce);\r\n        this.dx = potForce[0];\r\n        this.dy = potForce[1];\r\n\r\n        // Move, check if overlap, correct movement - left, right, random -dont move after a few tries\r\n        // var next_move = this.model.space.get_valid_position_from_potForce(this, potForce);\r\n        \r\n        // w/o overlap check\r\n        var next_move = [this.position[0] + this.dx * schedule_speed, this.position[1] + this.dy * schedule_speed];\r\n        next_move = this.model.space.correct_boundaries(next_move);\r\n\r\n        // admin overhead in space - world\r\n        this.position = next_move;\r\n        this.model.space.move_agent(this, this.position);\r\n    }\r\n    \r\n    spread_infection() {\r\n        var agents_inRange_UIDS = this.model.space.get_agents_inRange(this, this.model.infection_radius);\r\n\r\n        for (var uid of agents_inRange_UIDS) {\r\n            var agent = this.model.s_list.filter(function(object, index, arr){ return object.unique_id === uid;})[0];\r\n            if (typeof agent !== \"undefined\") {\r\n                if (agent.className == \"Susceptible\" && agent.infected == false && Math.random() < this.model.infection_probability_onContact) {\r\n                    agent.infected = true;\r\n                    this.has_infected += 1;\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nfunction random_choice(moves) {\r\n    var move = moves[Math.floor(Math.random() * moves.length)];\r\n    return move\r\n}\r\n\r\nfunction floor_position(position) {\r\n    return [Math.floor(position[0]), Math.floor(position[1])]\r\n}\r\n\r\nfunction normalize_2D(array) {\r\n    var norm = Math.sqrt(Math.pow(array[0], 2) + Math.pow(array[1], 2));\r\n    if (norm < 0.01) {\r\n        return [0, 0]\r\n    } else {\r\n        return [array[0]/norm, array[1]/norm]\r\n    }\r\n}\r\n\r\nfunction NAND(x, y) {\r\n\t// You can use whatever JS operators that you would like: &&, ||, !\r\n  return !(x && y);\r\n}\r\n\r\nexport {Agent}","import { Agent } from \"model/agents/basic-agent\"\r\n\r\nclass Susceptible extends Agent {\r\n    constructor(unique_id, position, model, now_in_center=false,\r\n        home=undefined, infected=false, steps_since_infection=0,\r\n        has_infected=0) {\r\n\r\n      super(unique_id, position, model, now_in_center, home, has_infected);\r\n\r\n      this.infected = infected;\r\n      this.steps_since_infection = steps_since_infection;\r\n      this.className = \"Susceptible\";\r\n\r\n      this.duration = this.model.duration_mean + getRandomInt(-1, 1);\r\n    }\r\n    \r\n    // step\r\n    step(){\r\n        var to_i = -1;\r\n        var to_r = -1;\r\n\r\n        // todo: faster if not whole array?\r\n        // interact with other agents\r\n        if (this.infected && this.steps_since_infection > this.model.steps_till_symptoms) {\r\n            if (Math.floor(this.steps_since_infection / this.model.steps_each_day) > this.duration) {\r\n                to_r = this.unique_id;\r\n\r\n            } else if (Math.random() < this.model.infection_recoginition_probability) {\r\n                to_i = this.unique_id;\r\n\r\n            } else {\r\n                // infected but not recognized\r\n                this.spread_infection();\r\n                // move agent\r\n                // this.move()\r\n                this.hotspot_move()\r\n                // spread in new position\r\n                this.spread_infection();\r\n                this.steps_since_infection += 1;\r\n            }\r\n        } else if (this.infected) {\r\n            this.steps_since_infection += 1;\r\n        }\r\n        \r\n        // move agent\r\n        this.hotspot_move()\r\n                \r\n        // interact with admin\r\n        return [to_r, to_i]\r\n    }\r\n\r\n}\r\n\r\nfunction getRandomInt(min, max) {\r\n    min = Math.ceil(min);\r\n    max = Math.floor(max);\r\n    return Math.floor(Math.random() * (max - min + 1)) + min;\r\n}\r\n\r\nexport { Susceptible }","import { Agent } from \"model/agents/basic-agent\"\r\n\r\nclass Removed extends Agent {\r\n    constructor(unique_id, position, model, now_in_center=false,\r\n        home=undefined, infected=false, steps_since_infection=0,\r\n        has_infected=0) {\r\n\r\n        super(unique_id, position, model, now_in_center, home, has_infected);\r\n        this.className = \"Removed\";\r\n    }    \r\n    // step\r\n    step(){\r\n        this.hotspot_move()\r\n        // no interaction - only occupying space\r\n    }\r\n\r\n}\r\n\r\nexport { Removed }","import { Agent } from \"model/agents/basic-agent\"\r\n\r\nclass Infected extends Agent {\r\n    constructor(unique_id, position, model, now_in_center=false,\r\n        home=undefined, steps_since_infection=0,\r\n        has_infected=0) {\r\n\r\n      super(unique_id, position, model, now_in_center, home, has_infected);\r\n\r\n      this.infected = true;\r\n      this.steps_since_infection = steps_since_infection;\r\n      this.className = \"Infected\";\r\n\r\n      this.duration = this.model.duration_mean + getRandomInt(-1, 1);\r\n    }\r\n    \r\n    \r\n    // step\r\n    step(){\r\n        var to_r = -1\r\n\r\n        // interact agents\r\n        if (Math.floor(this.steps_since_infection / this.model.steps_each_day) > this.duration) {\r\n            to_r = this.unique_id\r\n\r\n        } else {\r\n            this.spread_infection();\r\n            // move\r\n            this.hotspot_move()\r\n\r\n            // spread in new position\r\n            this.spread_infection();\r\n            this.steps_since_infection += 1;\r\n        }\r\n\r\n        // interact model - administration\r\n        return to_r\r\n    }\r\n\r\n}\r\n\r\nfunction getRandomInt(min, max) {\r\n    min = Math.ceil(min);\r\n    max = Math.floor(max);\r\n    return Math.floor(Math.random() * (max - min + 1)) + min;\r\n}\r\n\r\nexport { Infected }","class Space {\r\n    constructor(width, height){\r\n        this.width = width;\r\n        this.height = height;\r\n        this.agent_size = 1;\r\n        this.agent_list = []\r\n\r\n        // -> Nachbarschaftsliste - kontinuerlicher Raum - l n liste WiPro\r\n        this.lc = [...Array(this.height)].map(x=>Array(this.width).fill(-1))  \r\n        this.ll = new Array();\r\n        this.ll[0] = [-1, -1, [0, 0]];\r\n\r\n        this.home_multiplier = 0.75;\r\n        this.work_multiplier = 1;\r\n        this.repulsion_force_multiplier = 2;\r\n\r\n        // potential fields\r\n        this.attractive_points = new Array();\r\n        this.load_world_layout(\"work\")\r\n    }\r\n\r\n    load_world_layout(selection) {\r\n        if (selection == \"work\") {\r\n            this.add_attraction_at([Math.floor(this.width/5), Math.floor(4*this.height/5)], this.work_multiplier, [\"work\"], -1, 1);\r\n            this.add_attraction_at([Math.floor(4*this.width/5), Math.floor(this.height/5)], this.work_multiplier, [\"work\"], -1, 2);\r\n            this.add_attraction_at([Math.floor(2*this.width/5), Math.floor(this.height/5)], this.work_multiplier, [\"work\"], -1, 3);\r\n            this.add_attraction_at([Math.floor(4*this.width/5), Math.floor(1*this.height/2)], this.work_multiplier, [\"morning\",\"afterwork\"], 20, -1, \"park\"); // down right\r\n            //this.add_attraction_at([this.width-10, this.height-10], 0.25, [\"night\"], 10); // up right\r\n            //this.add_attraction_at([10, 10], 0.25, [\"evening\",\"morning\"], 10); // down left        \r\n            //this.add_attraction_at([this.width-10, 10], 0.25, [\"evening\",\"morning\"], 3); // down right\r\n        } else {\r\n            // todo\r\n        }\r\n    }\r\n\r\n    add_attraction_at(position, multiplier, active_at, influence_range=-1, group=-1, tag=\"default\") {\r\n        // active_at should be list like [\"night\", \"afterwork\"]\r\n        this.attractive_points.push([position, multiplier, active_at, influence_range, group, tag]);// pos + value\r\n    }\r\n\r\n    // Linked Cell + Potential Field\r\n    // each step: update linked cell\r\n    // each movement: get potential force for each agent\r\n    get_local_repulsion_positions(uid_list) {\r\n        if (uid_list.length > 0) {\r\n            var positions = new Array();\r\n            var agents_inrange = this.agent_list.filter(function(value) {return uid_list.includes(value[0])}); // filter by uid\r\n\r\n            for (var ag of agents_inrange) {\r\n                positions.push(ag[1]); // add position of agents in range\r\n            }\r\n            \r\n            return positions;\r\n        } else {\r\n            return [];\r\n        }\r\n    }\r\n\r\n    get_potential_force(agent, alpha=1, beta=2) {\r\n        var force_x_rep = 0;\r\n        var force_y_rep = 0;\r\n        var force_x_att = 0;\r\n        var force_y_att = 0;\r\n\r\n        var uid_list = this.inRange_linked_cell(agent.position, agent.unique_id, agent.model.repulsion_range); // range == infection range for movement\r\n        var pos = this.get_local_repulsion_positions(uid_list);\r\n        var current_agent = this.agent_list.filter(function(ag) {return ag[0] == agent.unique_id;})[0];\r\n        \r\n        for (var p of pos) {\r\n            var dist = distance(agent.position, p);\r\n            var U_grad_rep = this.repulsion_force_multiplier / Math.pow(dist, 2) *(1 / dist - 1/ (agent.model.repulsion_range + 0.1));\r\n\r\n            if (dist > 0.001) {\r\n                force_x_rep += - U_grad_rep * (agent.position[0] - p[0]) / dist;\r\n                force_y_rep += - U_grad_rep * (agent.position[1] - p[1]) / dist;\r\n            }   \r\n        }\r\n\r\n        for (var att of this.attractive_points) { //-\\nabla U_{att}(\\mathbf{x}) = -\\alpha (\\mathbf{x}-\\mathbf{x_{goal}}) \r\n            if (att[2].includes(agent.model.current_mode) && !agent.model.exit_lock) {\r\n                var dist = distance(agent.position, att[0]);\r\n\r\n                if ((dist < att[3] || att[3] === -1) && (current_agent[3] === att[4] || att[4] === -1) && NAND(agent.className == \"Infected\", agent.model.stay_at_home)) {\r\n                    force_x_att += - att[1] * (agent.position[0] - att[0][0])/ dist;\r\n                    force_y_att += - att[1] * (agent.position[1] - att[0][1])/ dist;\r\n                }\r\n            }            \r\n        }\r\n\r\n        if (force_x_att === 0 && force_y_att === 0) {\r\n            var dist = distance(agent.position, current_agent[2]); // home position\r\n            \r\n            if (dist > 0.001) {\r\n                force_x_att = - this.home_multiplier * (agent.position[0] - current_agent[2][0])/ dist;\r\n                force_y_att = - this.home_multiplier * (agent.position[1] - current_agent[2][1])/ dist;\r\n            }            \r\n        }\r\n        if (agent.model.stronger_repulsion) {\r\n            beta += beta;\r\n        }\r\n\r\n        var grad_x = alpha*force_x_att - beta*force_x_rep;\r\n        var grad_y = alpha*force_y_att - beta*force_y_rep;\r\n\r\n        return [grad_x, grad_y] // todo weight rep and att\r\n    }\r\n\r\n    reset_linked_cell(range) {\r\n        this.lc = [...Array(Math.floor(this.height/range)+1)].map(x=>Array(Math.floor(this.width/range)+1).fill(-1));\r\n        this.current_range = range;\r\n        this.ll.splice(0, this.ll.length);\r\n        this.ll[0] = [-1, -1, [0, 0]];\r\n    }\r\n\r\n    update_linked_cell(range) {\r\n        this.reset_linked_cell(range);\r\n\r\n        var n = 0;\r\n        for (var agent of this.agent_list) {\r\n            var nx = Math.floor(agent[1][0] / range);\r\n            var ny = Math.floor(agent[1][1] / range);\r\n\r\n            this.ll[n] = [this.lc[nx][ny], agent[0], agent[1]]; // ll list hast index for linked cell method and uid\r\n            this.lc[nx][ny] = n;\r\n            n++;\r\n        }\r\n    }\r\n\r\n    uids_in_cell_linked_cell(nx,ny) {\r\n        var uids = new Array();\r\n        var next;\r\n\r\n        next = this.lc[nx][ny]; // index des ersten atoms auslesen\r\n        while (this.ll[next][0] != -1) { //solange atome in Zelle nx, ny\r\n            uids.push(this.ll[next][1]); // add uid to list\r\n            next = this.ll[next][0]; // find next agent in ll\r\n        }\r\n\r\n        return uids\r\n    }\r\n\r\n    inRange_linked_cell(current_position, uid, range, with_position=false) {\r\n        var nx; \r\n        nx = Math.floor(current_position[0] / range);\r\n        var ny;\r\n        ny = Math.floor(current_position[1] / range);\r\n\r\n        var uids_inRange = new Array(); //  problem hier? array hatt 20.000 einträge\r\n        var next;\r\n\r\n        next = this.lc[nx][ny]; // index des ersten agenten auslesen\r\n        if (next >= 0) {\r\n            while (this.ll[next][0] != -1) { //solange atome in Zelle nx, ny\r\n                if (uid != this.ll[next][1]) {\r\n                    if (with_position) {\r\n                        uids_inRange.push([this.ll[next][1], this.ll[next][2]]);\r\n                    } else {\r\n                        uids_inRange.push(this.ll[next][1]); // add uid to list\r\n                    }\r\n                }\r\n                next = this.ll[next][0]; // find next agent in ll\r\n            }\r\n        }\r\n\r\n        return uids_inRange\r\n    }\r\n\r\n    inRange_all_uids_linked_cell(current_position, range, with_position=false) {\r\n        var nx = Math.floor(current_position[0] / range);\r\n        var ny = Math.floor(current_position[1] / range);\r\n\r\n        var uids_inRange = new Array();\r\n        var next;\r\n\r\n        next = this.lc[nx][ny]; // index des ersten atoms auslesen\r\n        while (this.ll[next][0] != -1) { //solange atome in Zelle nx, ny\r\n            if (with_position) {\r\n                uids_inRange.push([this.ll[next][1], this.ll[next][2]]);              \r\n            } else {\r\n                uids_inRange.push(this.ll[next][1]); // add uid to list\r\n            }\r\n            next = this.ll[next][0]; // find next agent in ll\r\n        }\r\n\r\n        return uids_inRange\r\n    }\r\n\r\n\r\n    // Registration/Administration of agents\r\n    //\r\n    add_agent(agent, home, group=-1) {       \r\n        this.agent_list.push([agent.unique_id, agent.position, home, group])\r\n    }\r\n\r\n    get_agent_attributes(agent) {\r\n        var filtered = this.agent_list.filter(function(value, index, arr){ return value[0] == agent.unique_id;});\r\n        return filtered\r\n    }\r\n\r\n    remove_agent(agent) {\r\n\r\n        if (agent.unique_id !== \"undefined\") {\r\n            var filtered = this.agent_list.filter(function(value, index, arr){ return value[0] != agent.unique_id;});\r\n\r\n            if (filtered.length == (this.agent_list.length - 1)) {\r\n                this.agent_list = filtered;\r\n\r\n            } else {\r\n                console.log(\"Error removing agent from world. UID not valid\")\r\n            }\r\n        } else {\r\n            console.log(\"Error setting up new agents\")\r\n        }\r\n    }\r\n\r\n    get_random_position_empty(radius_att_points=5) {\r\n        do {\r\n            var x = Math.floor((Math.random() * this.width));\r\n            var y = Math.floor((Math.random() * this.height));\r\n\r\n            var agents_in_position = this.agent_list.filter(function(element) {return distance(element[1], [x, y] < 0.5);});\r\n            \r\n            var att_point_valid_dist = true;\r\n            for (var att of this.attractive_points) {\r\n                if (distance(att[0], [x, y]) <= radius_att_points) {\r\n                    att_point_valid_dist = false;\r\n                }\r\n            }\r\n\r\n        } while (agents_in_position.length != 0 || att_point_valid_dist == false);\r\n\r\n        return [x, y]\r\n    }\r\n\r\n    // overlap is ok\r\n    /*\r\n    get_valid_position_from_potForce(agent, potForce) {\r\n        // todo\r\n        var new_position = [agent.position[0] + potForce[0], agent.position[1] + potForce[1]];\r\n        new_position = this.correct_boundaries(new_position);\r\n\r\n        var nx = Math.floor(new_position[0] / this.current_range);\r\n        var ny = Math.floor(new_position[1] / this.current_range);\r\n\r\n        var arr_x = new Array();\r\n        for (var tmp_x of [nx-1, nx, nx+1]) {\r\n            if (tmp_x >= 0 && tmp_x <= Math.floor(this.width/this.current_range)) {\r\n                arr_x.push(tmp_x);\r\n            }\r\n        }\r\n        var arr_y = new Array();\r\n        for (var tmp_y of [ny-1, ny, ny+1]) {\r\n            if (tmp_y >= 0 && tmp_y <= Math.floor(this.height/this.current_range)) {\r\n                arr_y.push(tmp_y);\r\n            }\r\n        }\r\n\r\n        var uids_inRange = new Array();\r\n        var next;\r\n\r\n        for (var nx of arr_x) {\r\n            for (var ny of arr_y) {\r\n                next = this.lc[nx][ny]; // index des ersten agenten auslesen\r\n                if (next >= 0) {\r\n                    while (this.ll[next][0] != -1) { //solange atome in Zelle nx, ny\r\n                        if (agent.unique_id != this.ll[next][1]) {\r\n                            uids_inRange.push([this.ll[next][1], this.ll[next][2]]);\r\n                        }\r\n                        next = this.ll[next][0]; // find next agent in ll\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        var overlap = new Array();\r\n        for (var ag of uids_inRange) {\r\n            if (distance(new_position, ag[1]) < this.agent_size) {\r\n                overlap.push(ag);\r\n            }\r\n        }\r\n        \r\n        // not done yet: todo\r\n\r\n        return new_position\r\n    }\r\n    */\r\n\r\n    correct_boundaries(pos) {\r\n        if (pos[0] < 0) {\r\n            pos[0] = 0;\r\n        } else if (pos[0] > this.width - 1) {\r\n            pos[0] = this.width - 1;\r\n        }\r\n        if (pos[1] < 0) {\r\n            pos[1] = 0;\r\n        } else if (pos[1] > this.height - 1) {\r\n            pos[1] = this.height - 1;\r\n        }\r\n        return pos\r\n    }\r\n\r\n    get_agents_inRange(agent, infection_range) {\r\n        // return uids of agents in range\r\n        var list = new Array();\r\n        var uids_pos_repulsion = this.inRange_linked_cell(agent.position, agent.unique_id, agent.model.repulsion_range, true); // [0]: uid; [1]: position\r\n        \r\n        for (var uid_pos of uids_pos_repulsion) {\r\n            if (distance(agent.position, uid_pos[1]) < infection_range) {\r\n                list.push(uid_pos[0]);\r\n            }\r\n        }\r\n\r\n        return list\r\n    }\r\n\r\n    move_agent(agent, new_position) {\r\n        \r\n        var found_index = this.agent_list.findIndex(element => element[0] == agent.unique_id);\r\n        var agent_inList = this.agent_list[found_index];\r\n\r\n        if (agent_inList.length) {\r\n            this.agent_list[found_index][1] = new_position;\r\n        } else {\r\n            console.log(\"Error moving agent\")\r\n        }\r\n    }\r\n}\r\n\r\nfunction range(start, end) {\r\n    var ans = [];\r\n    for (let i = start; i <= end; i++) {\r\n        ans.push(i);\r\n    }\r\n    return ans;\r\n}\r\n\r\nfunction distance(array1, array2) {\r\n    return Math.sqrt(Math.pow(array1[0] - array2[0], 2) + Math.pow(array1[1] - array2[1], 2));\r\n}\r\n\r\nfunction NAND(x, y) {\r\n\t// You can use whatever JS operators that you would like: &&, ||, !\r\n  return !(x && y);\r\n}\r\n\r\nexport {Space}","import { Susceptible } from \"model/agents/S-agent\"\r\nimport { Removed } from \"model/agents/R-agent\"\r\nimport { Infected } from \"model/agents/I-agent\"\r\nimport { Space } from \"model/Space\"\r\n\r\n\r\nclass SIR_Model {\r\n  // agent based SIR-Model\r\n    constructor(\r\n        population=200, \r\n        initial_infected=5, \r\n        infection_radius=2,\r\n        infection_probability_onContact=0.25,\r\n        duration_mean=5,\r\n        infection_recoginition_probability=0.8,\r\n        max_step=400,\r\n        stay_at_home=false,\r\n        stronger_repulsion=false,\r\n        exit_lock = false\r\n        ) {\r\n\r\n      this.population = population;\r\n      this.initial_infected = initial_infected;\r\n      this.infection_radius = infection_radius;\r\n      this.infection_probability_onContact = infection_probability_onContact;\r\n      this.duration_mean = duration_mean;\r\n      this.infection_recoginition_probability = infection_recoginition_probability;\r\n      this.max_step = max_step;\r\n      this.repulsion_range = 5; // has to be greater than infection range\r\n      this.steps_till_symptoms = 60;\r\n      \r\n      // map\r\n      this.width = 50;\r\n      this.height = 50;\r\n      \r\n      // controls\r\n      this.stay_at_home = stay_at_home;\r\n      this.stronger_repulsion = stronger_repulsion;\r\n      this.exit_lock = exit_lock;\r\n\r\n      // schedule - night - morning - work - afterwork - evening\r\n      this.steps_each_day = 70; // half an hour\r\n      this.step_num = 0;\r\n      this.day = 0;\r\n      this.current_mode = \"night\";\r\n      this.schedule = {\r\n        \"night\": 9,\r\n        \"morning\": 19,\r\n        \"work\": 44,\r\n        \"afterwork\": 58,\r\n        \"evening\": 69\r\n      }\r\n      this.schedule_random_activity = {\r\n        \"night\": 0.2,\r\n        \"morning\": 1.5,\r\n        \"work\": 0.2,\r\n        \"afterwork\": 1,\r\n        \"evening\": 0.5\r\n      }\r\n      this.schedule_speed = {\r\n        \"night\": 0.75,\r\n        \"morning\": 1.5,\r\n        \"work\": 2,\r\n        \"afterwork\": 1.75,\r\n        \"evening\": 1.25\r\n      }    \r\n    }\r\n    \r\n\r\n    reset() {\r\n      if (typeof this.s_list !== \"undefined\") {\r\n        //this.s_list.forEach(function(agent){ delete agent }); // no destructor?\r\n        delete this.s_list;\r\n      }\r\n\r\n      if (typeof this.r_list !== \"undefined\") {\r\n        //this.r_list.forEach(function(agent){ delete agent });\r\n        delete this.r_list\r\n      }\r\n\r\n      if (typeof this.i_list !== \"undefined\") {\r\n        //this.i_list.forEach(function(agent){ delete agent });\r\n        delete this.i_list\r\n      }\r\n      if (typeof this.space !== \"undefined\") {\r\n        delete this.space\r\n      }\r\n\r\n      // del every agent ?\r\n    }\r\n\r\n\r\n    initialize() {\r\n      if (this.infection_radius > this.repulsion_range) {\r\n        console.log(\"Error: Infection range has to be smaller or equal to repulsion range. Set to repulsion range\");\r\n        this.infection_radius = this.repulsion_range;\r\n      }\r\n\r\n      // agents\r\n      this.s_list = [];\r\n      this.r_list = [];\r\n      this.i_list = [];\r\n\r\n      // R0\r\n      this.old_R = new Array();\r\n      this.old_R.push(0);\r\n      this.old_I = new Array();\r\n      this.old_I.push(this.initial_infected);\r\n      this.old_S = new Array();\r\n      this.old_S.push(this.population - this.initial_infected);\r\n      this.R_array = new Array();\r\n\r\n      // grid world model\r\n      this.space = new Space(this.width, this.height);\r\n      \r\n      // schedule\r\n      this.day = 0;\r\n      this.step_num = 0;\r\n      this.current_mode = \"night\";\r\n\r\n      // setup population\r\n      var unique_id;\r\n      for (unique_id of range(1, (this.population - this.initial_infected))) {\r\n        var pos = this.space.get_random_position_empty(8);\r\n        var new_agent = new Susceptible(unique_id, pos, this, false, pos);\r\n\r\n        // register agent\r\n        this.s_list.push(new_agent);\r\n        this.space.add_agent(new_agent, pos, getRandomInt(1,3));\r\n      }\r\n\r\n      //setup infected agents\r\n      for (var u2 of range((unique_id + 1), (unique_id + this.initial_infected))) {\r\n        pos = this.space.get_random_position_empty(8);\r\n        new_agent = new Infected(u2, pos, this, false, pos);\r\n\r\n        // register agent\r\n        this.i_list.push(new_agent);\r\n        this.space.add_agent(new_agent, new_agent.home, getRandomInt(1,3));\r\n      }\r\n    }\r\n\r\n    set_stay_at_home(bool) {\r\n      this.stay_at_home = bool;\r\n    }\r\n\r\n    set_exit_lock(bool) {\r\n      this.exit_lock = bool;\r\n    }\r\n    \r\n    set_stronger_repulsion(bool) {\r\n      this.stronger_repulsion = bool;\r\n    }\r\n\r\n    set_spread_probability(bool) {\r\n      this.infection_probability_onContact = bool;\r\n    }\r\n\r\n\r\n    move_to_r(list_uids, from) {\r\n      var uid;\r\n\r\n      for (uid of list_uids) {\r\n        if (from == \"s\") {\r\n          var agent = this.s_list.filter(function(value, index, arr){ return value.unique_id === uid;})[0];\r\n          // delete\r\n          this.s_list = this.s_list.filter(function(value, index, arr){ return value.unique_id !== uid;});\r\n          // remove agent from world\r\n          this.space.remove_agent(agent);\r\n\r\n        } else if (from == \"i\") {\r\n          var agent = this.i_list.filter(function(value, index, arr){ return value.unique_id === uid;})[0];\r\n          // delete\r\n          this.i_list = this.i_list.filter(function(value, index, arr){ return value.unique_id !== uid;});\r\n          // remove agent from world\r\n          this.space.remove_agent(agent);\r\n\r\n        } else {\r\n          console.log(\"Error switching class to Removed\")\r\n        }\r\n\r\n        // add new\r\n        var new_agent = new Removed(agent.unique_id, agent.position, this, \r\n          agent.now_in_center, agent.home);\r\n        \r\n        new_agent.has_infected = agent.has_infected;\r\n\r\n        this.r_list.push(new_agent);        \r\n        this.space.add_agent(new_agent, new_agent.home, getRandomInt(1,3));\r\n      }\r\n    }\r\n\r\n\r\n    move_to_i(list_uids) {\r\n      var uid;\r\n\r\n      for (uid of list_uids) {\r\n        var agent = this.s_list.filter(function(value, index, arr){ return value.unique_id === uid;})[0];\r\n\r\n        // delete\r\n        this.s_list = this.s_list.filter(function(value, index, arr){ return value.unique_id !== uid;})\r\n        var att = this.space.get_agent_attributes(agent);\r\n        this.space.remove_agent(agent);\r\n\r\n        // add new\r\n        var new_agent = new Infected(agent.unique_id, agent.position, this, \r\n          agent.now_in_center, agent.home, agent.steps_since_infection);\r\n        \r\n        new_agent.has_infected = agent.has_infected;\r\n\r\n        this.i_list.push(new_agent);        \r\n        this.space.add_agent(new_agent, new_agent.home, att[0][3]); // infected dont go to work? , getRandomInt(1,2));\r\n      }\r\n    }\r\n\r\n\r\n    step_s(){\r\n      var to_r = [];\r\n      var to_i = [];\r\n\r\n      // iterate over every agent in s_list - apply step\r\n      for (var key in this.s_list) {\r\n        var [add_r, add_i] = this.s_list[key].step(); // if class change -> no move\r\n        if (add_r >= 0) {\r\n          to_r.push(add_r);\r\n        } else if (add_i >= 0) {\r\n          to_i.push(add_i);\r\n        }\r\n      }\r\n      \r\n      // move agents to other class\r\n      if (to_r.length > 0) {\r\n        this.move_to_r(to_r, \"s\");\r\n      } else if (to_i.length > 0) {\r\n        this.move_to_i(to_i);\r\n      }\r\n\r\n      // calculate count\r\n      var healthy = this.s_list.filter(function (el) {\r\n        return !el.infected\r\n      });\r\n\r\n      // return for statistics\r\n      return [healthy.length, this.s_list.length - healthy.length] \r\n    }\r\n\r\n\r\n    step_i(){\r\n      var to_r = [];\r\n\r\n      // iterate over every agent in s_list - apply step\r\n      for (var key in this.i_list) {\r\n        var add_r = this.i_list[key].step();\r\n        if (add_r >= 0) {\r\n          to_r.push(add_r);\r\n        }\r\n      }\r\n\r\n      // move agents to other class\r\n      if (to_r.length > 0) {\r\n        this.move_to_r(to_r, \"i\");\r\n      }\r\n\r\n      // return for statistics\r\n      return this.i_list.length\r\n    }\r\n\r\n      \r\n    step_r() {\r\n\r\n      // iterate over every agent in s_list - apply step\r\n      for (var key in this.r_list) {\r\n        this.r_list[key].step();\r\n      }\r\n\r\n      // return for statistics\r\n      return this.r_list.length\r\n    }\r\n\r\n    \r\n    calculate_R0(count_susceptible, count_infected, count_removed) {\r\n      // Todo: Basic reproduction number implementieren - https://web.stanford.edu/~jhj1/teachingdocs/Jones-Epidemics050308.pdf, https://wwwnc.cdc.gov/eid/article/25/1/17-1901_article\r\n      // R0 = βN / ν : β effective contact rate, ν removal rate; dr/dt = νi ; i = I/N, ds/dt = −βsi - https://en.wikipedia.org/wiki/Compartmental_models_in_epidemiology   \r\n\r\n      var R = this.old_R.slice(-this.steps_each_day);\r\n      const sum_R = R.reduce((a, b) => a + b, 0);\r\n      const dRdt = ((this.steps_each_day * count_removed - sum_R) / R.length) || 0;\r\n\r\n      var I = this.old_I.slice(-this.steps_each_day);\r\n      const sum_I = I.reduce((a, b) => a + b, 0);\r\n      const dIdt = ((this.steps_each_day * count_infected - sum_I) / I.length) || 0;\r\n\r\n      var gamma = (dRdt/count_infected + 0.01);\r\n\r\n      this.old_R.push(count_removed);\r\n      this.old_S.push(count_susceptible);\r\n      this.old_I.push(count_infected);\r\n\r\n      var R0 = ((dIdt /(gamma*count_infected) + 1) * this.population / count_susceptible);\r\n\r\n      if (this.day >= 1) {\r\n        console.log(\"R0:\" + R0);\r\n        return R0\r\n      } else {\r\n        return 0;\r\n      }\r\n      \r\n    }\r\n\r\n\r\n    calculate_mode() {\r\n      var daily_step = this.step_num % this.steps_each_day;\r\n      var mode;\r\n      if (daily_step <= this.schedule[\"night\"]) {\r\n        mode = \"night\"\r\n      } else if (daily_step > this.schedule[\"night\"] && daily_step <= this.schedule[\"morning\"]) {\r\n        mode = \"morning\"\r\n      } else if (daily_step > this.schedule[\"morning\"] && daily_step <= this.schedule[\"work\"]) {\r\n        mode = \"work\"\r\n      } else if (daily_step > this.schedule[\"work\"] && daily_step <= this.schedule[\"afterwork\"]) {\r\n        mode = \"afterwork\"\r\n      } else if (daily_step > this.schedule[\"afterwork\"] && daily_step <= this.schedule[\"evening\"]) {\r\n        mode = \"evening\"\r\n      }\r\n\r\n      return mode;\r\n    }\r\n\r\n\r\n    step() {\r\n      this.space.update_linked_cell(this.repulsion_range);\r\n\r\n      // get mode of current step\r\n      this.current_mode = this.calculate_mode();\r\n\r\n      // step for each class\r\n      var num_sus = this.step_s()\r\n      var num_inf = this.step_i()\r\n      var num_rem = this.step_r()\r\n      \r\n      var curr_R0 = this.calculate_R0(num_sus[0], (num_inf + num_sus[1]), num_rem);\r\n      this.R_array.push(curr_R0);\r\n\r\n      console.log(\"Day: \"+ this.day);\r\n      console.log(\"Mode: \"+ this.current_mode);\r\n      console.log(\"Step - day-cycle: \"+ this.step_num % this.steps_each_day);\r\n\r\n      // update step count and day\r\n      this.step_num += 1;\r\n      this.day = Math.floor(this.step_num / this.steps_each_day);\r\n\r\n      if (num_inf + num_sus[1] == 0) {\r\n        return true;\r\n      } else {\r\n        return false;\r\n      }\r\n    }\r\n\r\n    // remove sleep - regelmäßiges aufrufen - step methoden bei aufruf\r\n    // depricated: run via App.js\r\n    async run() {\r\n      this.reset()\r\n      this.initialize()\r\n      for (var i of range(1, this.max_step)) {\r\n        console.log(\"Step: \"+i);\r\n        \r\n         var ret = this.step()\r\n         if (ret) {\r\n          console.log(\"Reached end of Simulation after \"+i+\"steps.\");\r\n          break\r\n         }\r\n\r\n        await Sleep(200);\r\n      }\r\n    }\r\n  }\r\n\r\nfunction range(start, end) {\r\n    var ans = [];\r\n    for (let i = start; i <= end; i++) {\r\n        ans.push(i);\r\n    }\r\n    return ans;\r\n}\r\n\r\nfunction Sleep(milliseconds) {\r\n  return new Promise(resolve => setTimeout(resolve, milliseconds));\r\n}\r\n\r\nfunction getRandomInt(min, max) {\r\n  min = Math.ceil(min);\r\n  max = Math.floor(max);\r\n  return Math.floor(Math.random() * (max - min + 1)) + min;\r\n}\r\n\r\nexport {SIR_Model}","import * as PIXI from \"pixi.js\";\r\nimport React, { useRef, useState, useEffect } from \"react\";\r\nimport WorkImage_1 from \"./icons8-business-buildings.svg\";\r\nimport WorkImage_2 from \"./icons8-organization.svg\";\r\nimport WorkImage_3 from \"./icons8-manufacturing.svg\";\r\nimport ParkImage from \"./icons8-park-with-street-light.svg\";\r\nimport { GlowFilter } from \"@pixi/filter-glow\";\r\n\r\nconst agents = {};\r\nconst hotSpots = [];\r\nlet susceptibleTex;\r\nlet infectedTex;\r\nlet infectedUnrecognizedTex;\r\nlet recoveredTex;\r\nlet app;\r\nlet mainContainer;\r\nconst renderingSize = 600;\r\nlet infoText;\r\n\r\nlet elapsedTime = 0.0;\r\n\r\nlet renderIds = false;\r\n\r\nlet tickerFunc;\r\n\r\nconst PixiRenderer = React.memo(\r\n  ({ worldState, worldWidth, worldHeight, stepDuration }) => {\r\n    const stageContainer = useRef(null);\r\n\r\n    // Initial app setup and resize\r\n    useEffect(() => {\r\n      if (!app && worldWidth && worldHeight) {\r\n        app = new PIXI.Application({\r\n          width: renderingSize,\r\n          height: renderingSize,\r\n          transparent: true,\r\n          resizeTo: stageContainer.current,\r\n          autoDensity: true,\r\n        });\r\n        mainContainer = new PIXI.Container();\r\n        app.stage.addChild(mainContainer);\r\n        stageContainer.current.appendChild(app.view);\r\n\r\n        let gr = new PIXI.Graphics();\r\n        gr.beginFill(0x000000);\r\n        gr.lineStyle(0);\r\n        gr.drawCircle(\r\n          renderingSize / worldWidth,\r\n          renderingSize / worldHeight,\r\n          Math.min(renderingSize / worldWidth, renderingSize / worldHeight)\r\n        );\r\n        gr.endFill();\r\n\r\n        susceptibleTex = app.renderer.generateTexture(gr);\r\n\r\n        gr = new PIXI.Graphics();\r\n        gr.beginFill(0xff0000);\r\n        gr.lineStyle(0);\r\n        gr.drawCircle(\r\n          renderingSize / worldWidth,\r\n          renderingSize / worldHeight,\r\n          Math.min(renderingSize / worldWidth, renderingSize / worldHeight)\r\n        );\r\n        gr.endFill();\r\n\r\n        infectedTex = app.renderer.generateTexture(gr);\r\n\r\n        gr = new PIXI.Graphics();\r\n        gr.beginFill(0x0000ff);\r\n        gr.lineStyle(0);\r\n        gr.drawCircle(\r\n          renderingSize / worldWidth,\r\n          renderingSize / worldHeight,\r\n          Math.min(renderingSize / worldWidth, renderingSize / worldHeight)\r\n        );\r\n        gr.endFill();\r\n\r\n        infectedUnrecognizedTex = app.renderer.generateTexture(gr);\r\n\r\n        gr = new PIXI.Graphics();\r\n        gr.beginFill(0x00ff00);\r\n        gr.lineStyle(0);\r\n        gr.drawCircle(\r\n          renderingSize / worldWidth,\r\n          renderingSize / worldHeight,\r\n          Math.min(renderingSize / worldWidth, renderingSize / worldHeight)\r\n        );\r\n        gr.endFill();\r\n\r\n        recoveredTex = app.renderer.generateTexture(gr);\r\n      }\r\n    }, [worldWidth, worldHeight]);\r\n\r\n    // Game loop setup\r\n    useEffect(() => {\r\n      if (\r\n        !app ||\r\n        !mainContainer ||\r\n        !worldHeight ||\r\n        !worldWidth ||\r\n        !stepDuration ||\r\n        isNaN(renderingSize)\r\n      ) {\r\n        return;\r\n      }\r\n      app.ticker.remove(tickerFunc);\r\n      tickerFunc = (deltaTime) => {\r\n        elapsedTime += deltaTime / PIXI.settings.TARGET_FPMS / 1000;\r\n        Object.keys(agents).forEach((unique_id) => {\r\n          let agentInfo = agents[unique_id];\r\n          let heightWidth = Math.min(\r\n            app.renderer.width / worldWidth,\r\n            app.renderer.height / worldHeight\r\n          );\r\n          agentInfo.sprite.x =\r\n            agentInfo.oldPos[0] * (app.renderer.width / worldWidth) +\r\n            (agentInfo.agent.position[0] * (app.renderer.width / worldWidth) -\r\n              agentInfo.oldPos[0] * (app.renderer.width / worldWidth)) *\r\n              Math.min(elapsedTime / stepDuration, 1.0);\r\n          agentInfo.sprite.y =\r\n            agentInfo.oldPos[1] * (app.renderer.height / worldHeight) +\r\n            (agentInfo.agent.position[1] * (app.renderer.height / worldHeight) -\r\n              agentInfo.oldPos[1] * (app.renderer.height / worldHeight)) *\r\n              Math.min(elapsedTime / stepDuration, 1.0);\r\n          agentInfo.sprite.width = heightWidth;\r\n          agentInfo.sprite.height = heightWidth;\r\n          if (renderIds) {\r\n            agentInfo.text.x = agentInfo.sprite.x;\r\n            agentInfo.text.y =\r\n              agentInfo.sprite.y + app.renderer.height / worldHeight;\r\n          }\r\n        });\r\n        hotSpots.forEach((hotSpotInfo) => {\r\n          let heightWidth = Math.min(\r\n            hotSpotInfo.strengthFactor * app.renderer.width,\r\n            hotSpotInfo.strengthFactor * app.renderer.height\r\n          );\r\n          hotSpotInfo.sprite.x =\r\n            hotSpotInfo.posX * (app.renderer.width / worldWidth) -\r\n            heightWidth / 2;\r\n          hotSpotInfo.sprite.y =\r\n            hotSpotInfo.posY * (app.renderer.height / worldHeight) -\r\n            heightWidth / 2;\r\n\r\n          hotSpotInfo.sprite.width = heightWidth;\r\n          hotSpotInfo.sprite.height = heightWidth;\r\n        });\r\n        if (infoText) {\r\n          infoText.x = (app.renderer.width - infoText.width) / 2;\r\n          infoText.y = (app.renderer.height - infoText.height) / 2;\r\n        }\r\n      };\r\n      app.ticker.add(tickerFunc);\r\n    }, [app, mainContainer, worldHeight, worldWidth, stepDuration]);\r\n\r\n    // Initial world state setup\r\n    useEffect(() => {\r\n      if (app && mainContainer && worldState.hotSpots) {\r\n        worldState.hotSpots.forEach((hotSpot) => {\r\n          let hotSpotTex;\r\n          if (\r\n            hotSpot.group < 0 &&\r\n            (hotSpot.tag === \"default\" || hotSpot.tag === \"park\")\r\n          ) {\r\n            let gr = new PIXI.Graphics();\r\n            gr.beginFill(0x00ffff, 0.2);\r\n            gr.lineStyle(0);\r\n            gr.drawCircle(\r\n              hotSpot.strength * renderingSize,\r\n              hotSpot.strength * renderingSize,\r\n              Math.min(\r\n                hotSpot.strength * renderingSize,\r\n                hotSpot.strength * renderingSize\r\n              )\r\n            );\r\n            gr.endFill();\r\n            hotSpotTex = app.renderer.generateTexture(gr);\r\n            var strengthFactor = hotSpot.range / worldWidth;\r\n          } else if (hotSpot.group == 1 && hotSpot.tag === \"default\") {\r\n            hotSpotTex = PIXI.Texture.from(WorkImage_1);\r\n            var strengthFactor = 0.2 * hotSpot.strength;\r\n          } else if (hotSpot.group == 2 && hotSpot.tag === \"default\") {\r\n            hotSpotTex = PIXI.Texture.from(WorkImage_2);\r\n            var strengthFactor = 0.2 * hotSpot.strength;\r\n          } else if (hotSpot.group == 3 && hotSpot.tag === \"default\") {\r\n            hotSpotTex = PIXI.Texture.from(WorkImage_3);\r\n            var strengthFactor = 0.2 * hotSpot.strength;\r\n          }\r\n          let hotSpotSprite = new PIXI.Sprite(hotSpotTex);\r\n          mainContainer.addChild(hotSpotSprite);\r\n          hotSpots.push({\r\n            sprite: hotSpotSprite,\r\n            posX: hotSpot.pos[0],\r\n            posY: hotSpot.pos[1],\r\n            strengthFactor: strengthFactor,\r\n          });\r\n\r\n          if (hotSpot.tag === \"park\") {\r\n            hotSpotTex = PIXI.Texture.from(ParkImage);\r\n            var strengthFactor = 0.2 * hotSpot.strength;\r\n\r\n            let hotSpotSprite = new PIXI.Sprite(hotSpotTex);\r\n            hotSpots.push({\r\n              sprite: hotSpotSprite,\r\n              posX: hotSpot.pos[0],\r\n              posY: hotSpot.pos[1],\r\n              strengthFactor: strengthFactor,\r\n            });\r\n            mainContainer.addChild(hotSpotSprite);\r\n          }\r\n        });\r\n      }\r\n    }, [app, mainContainer]);\r\n\r\n    // Updates in every rerender...\r\n    Object.keys(agents).forEach((unique_id) => {\r\n      let index = worldState.agentList.findIndex((agent) => {\r\n        return agent.unique_id == unique_id;\r\n      });\r\n      if (index === -1) {\r\n        mainContainer.removeChild(agents[unique_id].sprite);\r\n        if (renderIds) {\r\n          mainContainer.removeChild(agents[unique_id].text);\r\n        }\r\n        delete agents[unique_id];\r\n      } else {\r\n        agents[unique_id].oldPos = agents[unique_id].agent.position;\r\n        agents[unique_id].oldState = agents[unique_id].agent.state;\r\n\r\n        agents[unique_id].agent = worldState.agentList[index];\r\n      }\r\n    });\r\n\r\n    if (app && mainContainer && worldState) {\r\n      worldState.agentList.forEach((agent) => {\r\n        let sprite;\r\n        let text;\r\n        if (agent.unique_id in agents) {\r\n          sprite = agents[agent.unique_id].sprite;\r\n          if (renderIds) {\r\n            text = agents[agent.unique_id].text;\r\n          }\r\n        } else {\r\n          sprite = new PIXI.Sprite(susceptibleTex);\r\n\r\n\r\n          mainContainer.addChild(sprite);\r\n          if (renderIds) {\r\n            text = new PIXI.Text(agent.unique_id.toString(), {\r\n              fontFamily: \"Arial\",\r\n              fontSize: 10,\r\n              fill: 0x5555ff,\r\n              align: \"center\",\r\n            });\r\n            mainContainer.addChild(text);\r\n          }\r\n\r\n          agents[agent.unique_id] = {\r\n            text: text,\r\n            sprite: sprite,\r\n            agent: agent,\r\n            oldPos: agent.position,\r\n            oldState: agent.state,\r\n          };\r\n        }\r\n        if (agent.state == \"infected\") {\r\n          sprite.texture = infectedTex;\r\n          if (agents[agent.unique_id].oldState !== \"infected\") {\r\n            sprite.filters = [\r\n              new GlowFilter({\r\n                distance: 15,\r\n                outerStrength: 2,\r\n                color: 0xff0000,\r\n              }),\r\n            ];\r\n          } else {\r\n            sprite.filters = [];\r\n          }\r\n        } else if (agent.state == \"infected_unrecognized\") {\r\n          sprite.texture = infectedUnrecognizedTex;\r\n          if (agents[agent.unique_id].oldState !== \"infected_unrecognized\") {\r\n            sprite.filters = [\r\n              new GlowFilter({\r\n                distance: 15,\r\n                outerStrength: 2,\r\n                color: 0x0000ff,\r\n              }),\r\n            ];\r\n          } else {\r\n            sprite.filters = [];\r\n          }\r\n        } else if (agent.state == \"recovered\") {\r\n          sprite.texture = recoveredTex;\r\n          if (agents[agent.unique_id].oldState !== \"recovered\") {\r\n            sprite.filters = [\r\n              new GlowFilter({\r\n                distance: 15,\r\n                outerStrength: 2,\r\n                color: 0x00ff00,\r\n              }),\r\n            ];\r\n          } else {\r\n            sprite.filters = [];\r\n          }\r\n        } else if (agent.state == \"susceptible\") {\r\n          sprite.texture = susceptibleTex;\r\n        }\r\n      });\r\n    }\r\n\r\n    // Display info screen if paused or stopped\r\n    if (\r\n      app &&\r\n      (worldState.state == \"stopped\" || worldState.state == \"paused\")\r\n    ) {\r\n      app.stage.removeChild(infoText);\r\n      mainContainer.filters = [new PIXI.filters.BlurFilter(12, 4, 1, 5)];\r\n      infoText = new PIXI.Text(`The simulation is ${worldState.state}.`, {\r\n        fontFamily: \"Arial\",\r\n        fontSize: 24,\r\n        fill: 0x000000,\r\n        align: \"center\",\r\n      });\r\n      app.stage.addChild(infoText);\r\n      infoText.filters = [];\r\n    } else if (app && mainContainer) {\r\n      mainContainer.filters = [];\r\n      app.stage.removeChild(infoText);\r\n    }\r\n\r\n    elapsedTime = 0.0;\r\n    return (\r\n      <div\r\n        style={{ width: \"100%\", height: \"600px\" }}\r\n        ref={stageContainer}\r\n      ></div>\r\n    );\r\n  }\r\n);\r\n\r\nexport { PixiRenderer };\r\n","import React from \"react\";\r\nimport { Box, Typography, Grid } from \"@material-ui/core\";\r\nimport DayIcon from \"@material-ui/icons/WbSunny\";\r\nimport NightIcon from \"@material-ui/icons/NightsStay\";\r\n\r\nconst TimeDisplay = React.memo(({ time, mode, day=0, R=1}) => {\r\n  let isNight = mode === \"night\" || mode === \"evening\";\r\n  return (\r\n    <Grid>\r\n    <Box\r\n      display=\"flex\"\r\n      direction=\"column\"\r\n      alignItems=\"center\"\r\n      justify=\"center\"\r\n      /*\r\n      <br></br>\r\n      <Typography variant=\"overline\">R0: {R}</Typography>\r\n      */ // insert later\r\n    >\r\n      <Typography variant=\"overline\">Day: {day}</Typography>\r\n    </Box>\r\n    <Box\r\n      display=\"flex\"\r\n      direction=\"column\"\r\n      alignItems=\"center\"\r\n      justify=\"center\"\r\n      p={2}\r\n    >\r\n      {isNight && <NightIcon />}\r\n      {!isNight && <DayIcon />}&nbsp;&nbsp;\r\n      <Typography variant=\"overline\">{time}</Typography>\r\n    </Box>\r\n  </Grid>\r\n  );\r\n});\r\n\r\nexport { TimeDisplay };","import React from \"react\";\r\nimport { Box, Typography, Grid } from \"@material-ui/core\";\r\n\r\nconst StatsDisplay = React.memo(({chartData=0, R0=-1}) => {\r\n    let sus = 0\r\n    let i = 0;\r\n    let i_all = 0;\r\n    let r = 0;\r\n    if (chartData.datasets.length > 0) {\r\n        sus = chartData.datasets[2].data.slice(-1)[0];\r\n        r = chartData.datasets[1].data.slice(-1)[0];\r\n        i = chartData.datasets[0].data.slice(-1)[0];\r\n        i_all = chartData.datasets[3].data.slice(-1)[0];\r\n    }\r\n  return (\r\n    <Grid>\r\n        <Box>\r\n        <Typography variant=\"overline\">Susceptible: {sus}</Typography>\r\n        </Box>\r\n        <Box>\r\n        <Typography variant=\"overline\">Infected and tested: {i}</Typography>\r\n        </Box>\r\n        <Box>\r\n        <Typography variant=\"overline\">Infected (red + blue): {i_all}</Typography>\r\n        </Box>\r\n        <Box>\r\n        <Typography variant=\"overline\">Recovered: {r}</Typography>\r\n        </Box>\r\n    </Grid>\r\n    \r\n  );\r\n});\r\n\r\nexport { StatsDisplay };","import React from \"react\";\r\nimport { Line } from \"react-chartjs-2\";\r\n\r\nconst LineChart = React.memo(({chartData, chartRef }) => {\r\n  return (\r\n    chartData && (\r\n      <Line\r\n        ref={chartRef}\r\n        data={chartData}\r\n        showTooltips={false}\r\n        options={{\r\n          maintainAspectRatio: false,\r\n          responsive: true,\r\n          elements: {\r\n            point: {\r\n              radius: 0,\r\n            },\r\n          },\r\n        }}\r\n      />\r\n    )\r\n  );\r\n});\r\nexport { LineChart };\r\n","import React, { useEffect, useState, useRef } from \"react\";\r\nimport ReactGA from \"react-ga\";\r\nimport CookieConsent from \"react-cookie-consent\";\r\nimport { SIR_Model } from \"model/Model\";\r\nimport {\r\n  AppBar,\r\n  Toolbar,\r\n  Typography,\r\n  Box,\r\n  Container,\r\n  Grid,\r\n  Slider,\r\n  Button,\r\n  Divider,\r\n  FormControlLabel,\r\n  Switch,\r\n  Link,\r\n} from \"@material-ui/core\";\r\nimport { PixiRenderer } from \"components/PixiRenderer\";\r\nimport { TimeDisplay } from \"components/TimeDisplay\";\r\nimport { StatsDisplay } from \"components/StatsDisplay\";\r\nimport { LineChart } from \"components/LineChart\";\r\n\r\nlet interval = null;\r\nlet model = null;\r\n\r\nlet history = [];\r\n\r\nfunction App() {\r\n  // For rendering\r\n  const [worldState, setWorldState] = useState({\r\n    agentList: [],\r\n    hotSpots: [],\r\n    chartData: { labels: [], datasets: [] },\r\n    time: \"00:00\",\r\n    dayPhase: \"day\",\r\n    state: \"stopped\",\r\n    day: 0,\r\n    R: 1,\r\n  });\r\n\r\n  const [worldWidth, setWorldWidth] = useState(undefined);\r\n  const [worldHeight, setWorldHeight] = useState(undefined);\r\n\r\n  // Configuration\r\n  const [initialInfected, setInitialInfected] = useState(3);\r\n  const [initialSuspectible, setInitialSuspectible] = useState(100);\r\n  const [probabilityRecognized, setProbabilityRecognized] = useState(0.5);\r\n  const [infectionRadius, setInfectionRadius] = useState(2);\r\n  const [spreadProbability, setSpreadProbability] = useState(0.01);\r\n  const [strongerRepulsion, setStrongerRepulsion] = useState(false);\r\n  const [stayAtHome, setStayAtHome] = useState(false);\r\n  const [stayAtHomeAll, setStayAtHomeAll] = useState(false);\r\n  const [infectionDuration, setInfectionDuration] = useState(5);\r\n  const [stepDuration, setStepDuration] = useState(0.3);\r\n\r\n  const chartRef = useRef(null);\r\n\r\n  useEffect(() => {\r\n    model = new SIR_Model(\r\n      initialSuspectible,\r\n      initialInfected,\r\n      infectionRadius,\r\n      spreadProbability,\r\n      20,\r\n      probabilityRecognized,\r\n      999999999999,\r\n      stayAtHome,\r\n      strongerRepulsion,\r\n      stayAtHomeAll\r\n    );\r\n\r\n    model.reset();\r\n    model.initialize();\r\n    setWorldHeight(model.height);\r\n    setWorldWidth(model.width);\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    let newWorldState = { ...worldState };\r\n    let space = model.space;\r\n\r\n    let newHotSpots = space.attractive_points.map((attractivePoint) => {\r\n      return {\r\n        pos: attractivePoint[0],\r\n        strength: attractivePoint[1],\r\n        range: attractivePoint[3],\r\n        group: attractivePoint[4],\r\n        tag: attractivePoint[5],\r\n      };\r\n    });\r\n    newWorldState.hotSpots = newHotSpots;\r\n    setWorldState(newWorldState);\r\n  }, [model]);\r\n\r\n  useEffect(() => {\r\n    clearInterval(interval);\r\n    if (worldState.state === \"running\") {\r\n      interval = setInterval(() => {\r\n        let newWorldState = { ...worldState };\r\n\r\n        let newInfectedCount = 0;\r\n        let newInfectedUnrecognizedCount = 0;\r\n        let newSusceptibleCount = 0;\r\n        let newRecoveredCount = 0;\r\n\r\n        let isSimulationEnd = model.step();\r\n        let hour =\r\n          (model.step_num % model.steps_each_day) * (24 / model.steps_each_day);\r\n        let newTime = new Date();\r\n        newTime.setSeconds(0);\r\n        newTime.setMinutes((hour % 1) * 60);\r\n        newTime.setHours(hour);\r\n        newWorldState.time = newTime.toLocaleTimeString(\"en-US\");\r\n\r\n        newWorldState.dayPhase = model.current_mode;\r\n        newWorldState.day = model.day;\r\n        newWorldState.R = model.R_array[-1];\r\n\r\n        let newAgentList = [];\r\n        let newSList = model.s_list.map((agent) => {\r\n          if (agent.infected === true) {\r\n            agent.state = \"infected_unrecognized\";\r\n            newInfectedUnrecognizedCount += 1;\r\n          } else {\r\n            agent.state = \"susceptible\";\r\n            newSusceptibleCount += 1;\r\n          }\r\n\r\n          return Object.assign({}, agent);\r\n        });\r\n\r\n        newAgentList.push(...newSList);\r\n\r\n        let newIList = model.i_list.map((agent) => {\r\n          agent.state = \"infected\";\r\n          newInfectedCount += 1;\r\n          return Object.assign({}, agent);\r\n        });\r\n        newAgentList.push(...newIList);\r\n\r\n        let newRList = model.r_list.map((agent) => {\r\n          agent.state = \"recovered\";\r\n          newRecoveredCount += 1;\r\n          return Object.assign({}, agent);\r\n        });\r\n        newAgentList.push(...newRList);\r\n\r\n        newWorldState.agentList = newAgentList;\r\n        if (isSimulationEnd) {\r\n          clearInterval(interval);\r\n          newWorldState.state = \"stopped\";\r\n        }\r\n\r\n        let newHistoryElement = {\r\n          infected: newInfectedCount,\r\n          infectedUnrecognized: newInfectedUnrecognizedCount,\r\n          recovered: newRecoveredCount,\r\n          susceptible: newSusceptibleCount,\r\n        };\r\n\r\n        let newHistory = [...history];\r\n        newHistory.push(newHistoryElement);\r\n        history = newHistory;\r\n\r\n        let newLabels = [];\r\n        let newSDataset = {\r\n          label: \"Susceptible\",\r\n          fill: true,\r\n          lineTension: 0.1,\r\n          borderColor: \"rgba(0,0,0,1)\",\r\n          data: [],\r\n        };\r\n        let newIDataset = {\r\n          label: \"Infected\",\r\n          fill: true,\r\n          lineTension: 0.1,\r\n          borderColor: \"rgba(255,0,0,1)\",\r\n          data: [],\r\n        };\r\n        let newIIRDataset = {\r\n          label: \"All Infected\",\r\n          fill: true,\r\n          lineTension: 0.1,\r\n          borderColor: \"rgba(255,0,0,0.4)\",\r\n          data: [],\r\n        };\r\n\r\n        let newRDataset = {\r\n          label: \"Recovered\",\r\n          fill: true,\r\n          lineTension: 0.1,\r\n          borderColor: \"rgba(0,255,0,1)\",\r\n          pointBackgroundColor: \"#fff\",\r\n          pointBorderWidth: 1,\r\n          pointHoverRadius: 5,\r\n          data: [],\r\n        };\r\n        newHistory.forEach((histEl, index) => {\r\n          newSDataset.data.push(histEl.susceptible);\r\n          newIDataset.data.push(histEl.infected);\r\n          newRDataset.data.push(histEl.recovered);\r\n          newIIRDataset.data.push(\r\n            histEl.infected + histEl.infectedUnrecognized\r\n          );\r\n          newLabels.push(index);\r\n        });\r\n\r\n        let newChartData = {\r\n          labels: newLabels,\r\n          datasets: [newIDataset, newRDataset, newSDataset, newIIRDataset],\r\n        };\r\n        newWorldState.chartData = newChartData;\r\n\r\n        setWorldState(newWorldState);\r\n      }, stepDuration * 1000);\r\n    } else {\r\n      clearInterval(interval);\r\n    }\r\n  }, [worldState.state, stepDuration]);\r\n\r\n  return (\r\n    <Box display=\"flex\" flexDirection=\"column\" className=\"App\" height=\"100%\">\r\n      <AppBar position=\"static\">\r\n        <Toolbar>\r\n          <Typography variant=\"h6\">SIR Playground</Typography>\r\n        </Toolbar>\r\n      </AppBar>\r\n      <Box mt={2} mb={2} flexGrow={1}>\r\n        <Container>\r\n          <Box>\r\n            <Grid container spacing={2}>\r\n              <Grid item xs={12} sm={12} md={12} lg={4}>\r\n                <Box p={2}>\r\n                  <Typography variant=\"overline\" gutterBottom>\r\n                    Initial Infected\r\n                  </Typography>\r\n                  <Slider\r\n                    valueLabelDisplay=\"auto\"\r\n                    step={1}\r\n                    marks\r\n                    min={1}\r\n                    max={10}\r\n                    value={initialInfected}\r\n                    onChange={(event, newValue) => {\r\n                      setInitialInfected(newValue);\r\n                    }}\r\n                  />\r\n                  <Typography variant=\"overline\" gutterBottom>\r\n                    Population\r\n                  </Typography>\r\n                  <Slider\r\n                    valueLabelDisplay=\"auto\"\r\n                    step={25}\r\n                    marks\r\n                    min={25}\r\n                    max={500}\r\n                    value={initialSuspectible}\r\n                    onChange={(event, newValue) => {\r\n                      setInitialSuspectible(newValue);\r\n                    }}\r\n                  />\r\n                  <Typography variant=\"overline\" gutterBottom>\r\n                    Probability Recognized\r\n                  </Typography>\r\n                  <Slider\r\n                    valueLabelDisplay=\"auto\"\r\n                    step={0.1}\r\n                    marks\r\n                    min={0}\r\n                    max={1}\r\n                    value={probabilityRecognized}\r\n                    onChange={(event, newValue) => {\r\n                      setProbabilityRecognized(newValue);\r\n                    }}\r\n                  />\r\n                  <Typography variant=\"overline\" gutterBottom>\r\n                    Infection Radius\r\n                  </Typography>\r\n                  <Slider\r\n                    valueLabelDisplay=\"auto\"\r\n                    step={1}\r\n                    marks\r\n                    min={2}\r\n                    max={4}\r\n                    value={infectionRadius}\r\n                    onChange={(event, newValue) => {\r\n                      setInfectionRadius(newValue);\r\n                    }}\r\n                  />\r\n\r\n                  <Typography variant=\"overline\" gutterBottom>\r\n                    Mean Infection Duration\r\n                  </Typography>\r\n                  <Slider\r\n                    valueLabelDisplay=\"auto\"\r\n                    step={1}\r\n                    marks\r\n                    min={3}\r\n                    max={8}\r\n                    value={infectionDuration}\r\n                    onChange={(event, newValue) => {\r\n                      setInfectionDuration(newValue);\r\n                    }}\r\n                  />\r\n\r\n                  <Typography variant=\"overline\" gutterBottom>\r\n                    Spread Probability\r\n                  </Typography>\r\n                  <br />\r\n                  <FormControlLabel\r\n                    control={\r\n                      <Switch\r\n                        checked={spreadProbability >= 0.1}\r\n                        onChange={(event) => {\r\n                          if (event.target.checked) {\r\n                            setSpreadProbability(0.1);\r\n                            model.set_spread_probability(0.1);\r\n                          } else {\r\n                            setSpreadProbability(0.01);\r\n                            model.set_spread_probability(0.01);\r\n                          }\r\n                        }}\r\n                      />\r\n                    }\r\n                    label=\"Increased Probability\"\r\n                  />\r\n                  <br />\r\n\r\n                  <Typography variant=\"overline\" gutterBottom>\r\n                    Social distancing\r\n                  </Typography>\r\n                  <br />\r\n                  <FormControlLabel\r\n                    control={\r\n                      <Switch\r\n                        checked={strongerRepulsion}\r\n                        onChange={(event) => {\r\n                          if (event.target.checked) {\r\n                            setStrongerRepulsion(true);\r\n                            model.set_stronger_repulsion(true);\r\n                          } else {\r\n                            setStrongerRepulsion(false);\r\n                            model.set_stronger_repulsion(false);\r\n                          }\r\n                        }}\r\n                      />\r\n                    }\r\n                    label=\"Try to hold distance\"\r\n                  />\r\n                  <br />\r\n\r\n                  <Typography variant=\"overline\" gutterBottom>\r\n                    Stay at home\r\n                  </Typography>\r\n                  <br />\r\n                  <FormControlLabel\r\n                    control={\r\n                      <Switch\r\n                        checked={stayAtHome}\r\n                        onChange={(event) => {\r\n                          if (event.target.checked) {\r\n                            setStayAtHome(true);\r\n                            model.set_stay_at_home(true);\r\n                          } else {\r\n                            setStayAtHome(false);\r\n                            model.set_stay_at_home(false);\r\n                          }\r\n                        }}\r\n                      />\r\n                    }\r\n                    label=\"Infected\"\r\n                  />\r\n                  <br />\r\n                  <FormControlLabel\r\n                    control={\r\n                      <Switch\r\n                        checked={stayAtHomeAll}\r\n                        onChange={(event) => {\r\n                          if (event.target.checked) {\r\n                            setStayAtHomeAll(true);\r\n                            setStayAtHome(true);\r\n\r\n                            model.set_stay_at_home(true);\r\n                            model.set_exit_lock(true);\r\n                          } else {\r\n                            setStayAtHomeAll(false);\r\n                            setStayAtHome(false);\r\n\r\n                            model.set_stay_at_home(false);\r\n                            model.set_exit_lock(false);\r\n                          }\r\n                        }}\r\n                      />\r\n                    }\r\n                    label=\"Everybody\"\r\n                  />\r\n                  <br />\r\n                  <Box mt={2} mb={2}>\r\n                    <Divider />\r\n                  </Box>\r\n                  <Typography variant=\"overline\" gutterBottom>\r\n                    Step Period (s)\r\n                  </Typography>\r\n                  <Slider\r\n                    valueLabelDisplay=\"auto\"\r\n                    step={0.1}\r\n                    marks\r\n                    min={0.1}\r\n                    max={2.0}\r\n                    value={stepDuration}\r\n                    onChange={(event, newValue) => {\r\n                      setStepDuration(newValue);\r\n                    }}\r\n                  />\r\n                  <Box mt={2}>\r\n                    <Button\r\n                      color=\"primary\"\r\n                      variant=\"contained\"\r\n                      size=\"large\"\r\n                      onClick={() => {\r\n                        let newWorldState = { ...worldState };\r\n                        if (worldState.state == \"running\") {\r\n                          newWorldState.state = \"paused\";\r\n                          clearInterval(interval);\r\n                        } else {\r\n                          if (worldState.state == \"stopped\") {\r\n                            model = new SIR_Model(\r\n                              initialSuspectible,\r\n                              initialInfected,\r\n                              infectionRadius,\r\n                              spreadProbability,\r\n                              infectionDuration,\r\n                              probabilityRecognized,\r\n                              999999999999,\r\n                              stayAtHome,\r\n                              strongerRepulsion,\r\n                              stayAtHomeAll\r\n                            );\r\n\r\n                            model.reset();\r\n                            model.initialize();\r\n                            setWorldHeight(model.height);\r\n                            setWorldWidth(model.width);\r\n                          }\r\n\r\n                          newWorldState.state = \"running\";\r\n                        }\r\n                        setWorldState(newWorldState);\r\n                      }}\r\n                    >\r\n                      {worldState.state === \"running\" ? \"Pause\" : \"Start\"}\r\n                    </Button>\r\n                    &nbsp;&nbsp;\r\n                    <Button\r\n                      color=\"primary\"\r\n                      variant=\"contained\"\r\n                      size=\"large\"\r\n                      onClick={() => {\r\n                        let newWorldState = { ...worldState };\r\n                        history = [];\r\n                        newWorldState.state = \"stopped\";\r\n                        setWorldState(newWorldState);\r\n                      }}\r\n                    >\r\n                      Reset\r\n                    </Button>\r\n                  </Box>\r\n                </Box>\r\n              </Grid>\r\n              <Grid item xs={12} sm={12} md={12} lg={6}>\r\n                <Box\r\n                  height=\"100%\"\r\n                  display=\"flex\"\r\n                  flexDirection=\"column\"\r\n                  overflow=\"hidden\"\r\n                >\r\n                  <PixiRenderer\r\n                    worldState={worldState}\r\n                    worldWidth={worldWidth}\r\n                    worldHeight={worldHeight}\r\n                    stepDuration={stepDuration}\r\n                  />\r\n                  <Box height=\"200px\">\r\n                    {worldState.chartData && (\r\n                      <LineChart\r\n                        chartData={worldState.chartData}\r\n                        chartRef={chartRef}\r\n                      />\r\n                    )}\r\n                  </Box>\r\n                </Box>\r\n              </Grid>\r\n              <Grid item xs={12} sm={12} md={12} lg={2}>\r\n                <TimeDisplay\r\n                  time={worldState.time}\r\n                  mode={worldState.dayPhase}\r\n                  day={worldState.day}\r\n                  R={worldState.R}\r\n                />\r\n                <StatsDisplay chartData={worldState.chartData} />\r\n              </Grid>\r\n            </Grid>\r\n          </Box>\r\n          <Box display=\"flex\" justifyContent=\"center\">\r\n            <Typography variant=\"caption\">\r\n              SIR-Playground created by{\" \"}\r\n              <Link href=\"https://github.com/SYoy\">SYoy</Link> and{\" \"}\r\n              <Link href=\"https://github.com/dani2112\">dani2112</Link>\r\n            </Typography>\r\n          </Box>\r\n          <CookieConsent\r\n            location=\"bottom\"\r\n            buttonText=\"I accept\"\r\n            cookieName=\"CookieConsentBanner\"\r\n            style={{ background: \"#2B373B\" }}\r\n            buttonStyle={{ color: \"#4e503b\", fontSize: \"13px\" }}\r\n            expires={150}\r\n            onAccept={({ acceptedByScrolling }) => {\r\n              if (acceptedByScrolling) {                \r\n                ReactGA.initialize(\"UA-161194303-3\");\r\n                ReactGA.pageview(window.location.pathname);\r\n                console.log(\"Cookies accepted by scrolling\")\r\n              } else {\r\n                ReactGA.initialize(\"UA-161194303-3\");\r\n                ReactGA.pageview(window.location.pathname);\r\n              }\r\n          }}\r\n          >\r\n            This website uses cookies to enhance the user experience.{\" \"}\r\n        </CookieConsent>\r\n        </Container>\r\n      </Box>\r\n    </Box>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"containers/App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\n\r\nReactDOM.render(<App />, document.getElementById(\"root\"));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}